This file is a merged representation of a subset of the codebase, containing files not matching ignore patterns, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of a subset of the repository's contents that is considered the most important context.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching these patterns are excluded: page.tsx.backup, collective/*.**, page.tsx.archive, /*, blog/
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
api/
  ask/
    route.ts
  auth/
    [...nextauth]/
      route.ts
    route.ts
  blog/
    route.ts
  callback/
    route.ts
  checkout/
    route.ts
  dev/
    zip/
      route.ts
  leads/
    route.ts
  sprint/
    [dayNumber]/
      route.ts
    days/
      route.ts
app/
  chat/
    page.tsx
  courses/
    [courseId]/
      CourseViewer.tsx
      page.tsx
    page.tsx
  profile/
    page.tsx
  settings/
    page.tsx
  sprint/
    dashboard/
      page.tsx
    day/
      [dayNumber]/
        page.tsx
    page.tsx
  support/
    page.tsx
  layout.tsx
  page.tsx
auth/
  error/
    page.tsx
  signin/
    page.tsx
  verify-request/
    page.tsx
  page.tsx
book/
  page.tsx
legal/
  disclaimer/
    page.tsx
  privacy/
    page.tsx
  terms/
    page.tsx
news/
  [slug]/
    page.tsx
  page.tsx
offers/
  diamond-advantage/
    page.tsx
  diamond-edge-mastery/
    page.tsx
  pressure-room-one/
    page.tsx
program/
  page.tsx
globals.css
layout.tsx
page.tsx
providers.tsx
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="api/ask/route.ts">
import { askBookStreaming } from '@/lib/rag/claude-simple';
import { NextRequest } from 'next/server';

export const runtime = 'nodejs'; // Use Node.js runtime for streaming

export async function POST(request: NextRequest) {
  try {
    const { question } = await request.json();

    if (!question || typeof question !== 'string') {
      return Response.json(
        { error: 'Question is required and must be a string' },
        { status: 400 }
      );
    }

    // Check for API key (optional rate limiting/auth)
    // Uncomment if you want to require authentication
    // const apiKey = request.headers.get('x-api-key');
    // if (apiKey !== process.env.ADMIN_API_KEY) {
    //   return Response.json({ error: 'Unauthorized' }, { status: 401 });
    // }

    // Stream the response
    const stream = await askBookStreaming(question);

    // Convert Anthropic stream to ReadableStream
    const readableStream = new ReadableStream({
      async start(controller) {
        try {
          for await (const chunk of stream) {
            if (chunk.type === 'content_block_delta') {
              if (chunk.delta.type === 'text_delta') {
                const text = chunk.delta.text;
                controller.enqueue(new TextEncoder().encode(text));
              }
            }
          }
          controller.close();
        } catch (error) {
          controller.error(error);
        }
      },
    });

    return new Response(readableStream, {
      headers: {
        'Content-Type': 'text/plain; charset=utf-8',
        'Transfer-Encoding': 'chunked',
      },
    });
  } catch (error) {
    console.error('Error in /api/ask:', error);
    return Response.json(
      {
        error:
          error instanceof Error ? error.message : 'Failed to process question',
      },
      { status: 500 }
    );
  }
}
</file>

<file path="api/auth/[...nextauth]/route.ts">
/**
 * NextAuth.js API Route Handler
 *
 * Handles all NextAuth.js authentication requests at /api/auth/*
 * Including sign-in, sign-out, callbacks, and session management.
 */

import { handlers } from "../../../../../auth";

export const { GET, POST } = handlers;
</file>

<file path="api/auth/route.ts">
import { NextRequest, NextResponse } from 'next/server';

const GITHUB_CLIENT_ID = process.env.GITHUB_CLIENT_ID || '';
const GITHUB_CLIENT_SECRET = process.env.GITHUB_CLIENT_SECRET || '';

export async function GET(request: NextRequest) {
  const searchParams = request.nextUrl.searchParams;
  const provider = searchParams.get('provider');
  
  if (provider !== 'github') {
    return NextResponse.json(
      { error: 'Only GitHub provider is supported' },
      { status: 400 }
    );
  }

  const redirectUri = `${request.nextUrl.origin}/api/callback`;
  const authUrl = `https://github.com/login/oauth/authorize?client_id=${GITHUB_CLIENT_ID}&redirect_uri=${encodeURIComponent(redirectUri)}&scope=repo,user`;

  return NextResponse.redirect(authUrl);
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { code, provider } = body;

    if (provider !== 'github' || !code) {
      return NextResponse.json(
        { error: 'Invalid request' },
        { status: 400 }
      );
    }

    // Exchange code for access token
    const tokenResponse = await fetch('https://github.com/login/oauth/access_token', {
      method: 'POST',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        client_id: GITHUB_CLIENT_ID,
        client_secret: GITHUB_CLIENT_SECRET,
        code,
      }),
    });

    const tokenData = await tokenResponse.json();

    if (tokenData.error) {
      return NextResponse.json(
        { error: tokenData.error_description || 'Authentication failed' },
        { status: 401 }
      );
    }

    // Get user info
    const userResponse = await fetch('https://api.github.com/user', {
      headers: {
        'Authorization': `Bearer ${tokenData.access_token}`,
        'Accept': 'application/json',
      },
    });

    const userData = await userResponse.json();

    return NextResponse.json({
      token: tokenData.access_token,
      provider: 'github',
      user: {
        login: userData.login,
        name: userData.name,
        email: userData.email,
        avatar_url: userData.avatar_url,
      },
    });
  } catch (error) {
    console.error('OAuth error:', error);
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    );
  }
}
</file>

<file path="api/blog/route.ts">
import { getContentByType } from "@/lib/content";
import { NextResponse } from "next/server";

export async function GET() {
  try {
    const posts = await getContentByType("blog");
    return NextResponse.json(posts);
  } catch (error) {
    console.error("Error fetching blog posts:", error);
    return NextResponse.json(
      { error: "Failed to fetch blog posts" },
      { status: 500 }
    );
  }
}
</file>

<file path="api/callback/route.ts">
import { NextRequest, NextResponse } from 'next/server';

export async function GET(request: NextRequest) {
  const searchParams = request.nextUrl.searchParams;
  const code = searchParams.get('code');
  const state = searchParams.get('state');

  if (!code) {
    return new NextResponse('Authorization code not found', { status: 400 });
  }

  // Create an HTML page that posts the code back to the CMS
  const html = `
    <!DOCTYPE html>
    <html>
      <head>
        <meta charset="utf-8" />
        <title>Authenticating...</title>
        <style>
          body {
            font-family: system-ui, -apple-system, sans-serif;
            display: flex;
            align-items: center;
            justify-content: center;
            height: 100vh;
            margin: 0;
            background: #f5f5f5;
          }
          .container {
            text-align: center;
            padding: 2rem;
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
          }
          h1 {
            color: #333;
            font-size: 1.5rem;
            margin-bottom: 1rem;
          }
          p {
            color: #666;
          }
        </style>
      </head>
      <body>
        <div class="container">
          <h1>Authenticating...</h1>
          <p>Please wait while we complete the authentication process.</p>
        </div>
        <script>
          (function() {
            function receiveMessage(e) {
              console.log("receiveMessage", e);
              
              if (e.origin !== window.location.origin) {
                console.log("Invalid origin:", e.origin);
                return;
              }

              if (e.data === "authorizing:github") {
                e.source.postMessage(
                  {
                    code: "${code}",
                    state: "${state || ''}"
                  },
                  e.origin
                );
              }
            }
            
            window.addEventListener("message", receiveMessage, false);
            window.opener?.postMessage("authorizing:github", window.location.origin);
          })();
        </script>
      </body>
    </html>
  `;

  return new NextResponse(html, {
    headers: {
      'Content-Type': 'text/html',
    },
  });
}
</file>

<file path="api/checkout/route.ts">
/* eslint-disable */
import { NextRequest, NextResponse } from "next/server";
import Stripe from "stripe";

// Initialize Stripe only if key is provided
const getStripe = () => {
  if (!process.env.STRIPE_SECRET_KEY) {
    throw new Error("STRIPE_SECRET_KEY is not configured");
  }
  return new Stripe(process.env.STRIPE_SECRET_KEY, {
    apiVersion: "2025-09-30.clover",
  });
};

export async function POST(request: NextRequest) {
  try {
    const { priceId } = await request.json();
    const stripe = getStripe();

    // Create Stripe Checkout Session
    const session = await stripe.checkout.sessions.create({
      mode: "payment",
      line_items: [
        {
          price: priceId,
          quantity: 1,
        },
      ],
      success_url: `${request.nextUrl.origin}/app?success=true`,
      cancel_url: `${request.nextUrl.origin}/?canceled=true`,
      automatic_tax: { enabled: true },
    });

    // Return the URL to redirect to
    return NextResponse.json({ url: session.url });
  } catch (error) {
    console.error("Error creating checkout session:", error);
    return NextResponse.json(
      { error: "Error creating checkout session" },
      { status: 500 }
    );
  }
}
</file>

<file path="api/dev/zip/route.ts">
import { NextRequest, NextResponse } from 'next/server';
import { execSync } from 'child_process';
import { readFileSync, existsSync } from 'fs';
import { join } from 'path';
import Anthropic from '@anthropic-ai/sdk';

export const runtime = 'nodejs';
export const maxDuration = 60; // Allow up to 60 seconds for AI processing

const anthropic = new Anthropic({
  apiKey: process.env.ANTHROPIC_API_KEY!,
});

export async function GET(request: NextRequest) {
  try {
    // Check authentication
    const searchParams = request.nextUrl.searchParams;
    const authParam = searchParams.get('whoistheboss');

    if (authParam !== 'iamtheboss') {
      return new NextResponse('Unauthorized', { status: 401 });
    }

    // Check for AI processing mode
    const aiMode = searchParams.get('ai') === 'true';

    // Get repository root (project root) or subdirectory for AI mode
    const repoRoot = process.cwd();
    const workingDir = aiMode ? join(repoRoot, 'src/app/app') : repoRoot;

    // Check for required files
    const configPath = join(repoRoot, 'repomix.config.json');
    const ignorePath = join(repoRoot, '.repomixignore');
    const outputPath = join(repoRoot, 'repomix-output.xml');

    if (!existsSync(configPath)) {
      return NextResponse.json(
        { error: 'repomix.config.json not found in repository root' },
        { status: 400 }
      );
    }

    if (!existsSync(ignorePath)) {
      return NextResponse.json(
        { error: '.repomixignore not found in repository root' },
        { status: 400 }
      );
    }

    // Run repomix synchronously from the appropriate directory
    try {
      execSync('repomix', {
        cwd: workingDir,
        stdio: 'inherit',
        encoding: 'utf-8'
      });
    } catch (execError) {
      return NextResponse.json(
        {
          error: 'Failed to execute repomix',
          details: execError instanceof Error ? execError.message : 'Unknown error'
        },
        { status: 500 }
      );
    }

    // Determine output path based on working directory
    const actualOutputPath = aiMode ? join(workingDir, 'repomix-output.xml') : outputPath;

    // Check if output file was created
    if (!existsSync(actualOutputPath)) {
      return NextResponse.json(
        { error: 'repomix-output.xml was not generated' },
        { status: 500 }
      );
    }

    // Read the XML file
    const xmlContent = readFileSync(actualOutputPath, 'utf-8');

    // If AI mode, process with Claude
    if (aiMode) {
      try {
        const exampleFormat = `# Website Copy for Editing

## Page Title (/route)

### Section Name
**Element Type:**
> Content here

**List Items:**
1. Item one
2. Item two

**CTA Buttons:**
- Button text

---

Continue with all pages and sections...`;

        const message = await anthropic.messages.create({
          model: 'claude-sonnet-4-5-20250929',
          max_tokens: 16000,
          system: `You are a technical content extractor. Your task is to analyze Next.js page files and extract ALL user-facing copy (text content) into a clean, organized markdown document.

Extract and organize:
- Page titles and headings
- All text content (paragraphs, lists, labels)
- Button text and CTAs
- Placeholder text
- Form labels and helper text
- Status messages
- Metadata (titles, descriptions)

Format the output as structured markdown following this pattern:
${exampleFormat}

Be thorough - include EVERYTHING a user would see. Organize by page route, then by section, then by UI element type.`,
          messages: [
            {
              role: 'user',
              content: `Extract all user-facing copy from these Next.js page files and format as structured markdown:\n\n${xmlContent}`
            }
          ],
        });

        const extractedCopy = message.content[0].type === 'text' ? message.content[0].text : '';

        // Return markdown with proper headers
        return new NextResponse(extractedCopy, {
          status: 200,
          headers: {
            'Content-Type': 'text/markdown; charset=utf-8',
            'Content-Disposition': 'inline; filename="website-copy.md"',
          },
        });
      } catch (aiError) {
        return NextResponse.json(
          {
            error: 'Failed to process with AI',
            details: aiError instanceof Error ? aiError.message : 'Unknown error'
          },
          { status: 500 }
        );
      }
    }

    // Standard XML mode - wrap content in proper XML root elements for browser parsing
    const wrappedXml = `<?xml version="1.0" encoding="UTF-8"?>\n<repository>\n${xmlContent}\n</repository>`;

    // Return XML with proper headers
    return new NextResponse(wrappedXml, {
      status: 200,
      headers: {
        'Content-Type': 'application/xml; charset=utf-8',
        'Content-Disposition': 'inline; filename="repomix-output.xml"',
      },
    });

  } catch (error) {
    console.error('Error in /api/dev/zip:', error);
    return NextResponse.json(
      {
        error: 'Internal server error',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}
</file>

<file path="api/leads/route.ts">
import { NextRequest, NextResponse } from 'next/server';
import { nanoid } from 'nanoid';

// Dynamic route config for Next.js 15
export const dynamic = 'force-dynamic';

// Rate limiting map (in production, use Redis or similar)
const rateLimitMap = new Map<string, { count: number; resetAt: number }>();

function checkRateLimit(ip: string): boolean {
  const now = Date.now();
  const limit = rateLimitMap.get(ip);

  if (!limit || now > limit.resetAt) {
    rateLimitMap.set(ip, { count: 1, resetAt: now + 60000 }); // 1 minute
    return true;
  }

  if (limit.count >= 5) {
    return false;
  }

  limit.count++;
  return true;
}

function validateEmail(email: string): boolean {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
}

export async function POST(request: NextRequest) {
  try {
    // Lazy import turso to avoid build-time initialization
    const { turso } = await import('@/lib/turso');

    // Rate limiting
    const ip = request.headers.get('x-forwarded-for') || request.headers.get('x-real-ip') || 'unknown';
    if (!checkRateLimit(ip)) {
      return NextResponse.json(
        { success: false, error: 'Too many requests. Please try again later.' },
        { status: 429, headers: { 'Retry-After': '60' } }
      );
    }

    // Parse request body
    const body = await request.json();
    const { email, consentGiven } = body;

    // Validate email
    if (!email || !validateEmail(email)) {
      return NextResponse.json(
        { success: false, error: 'Invalid email address' },
        { status: 400 }
      );
    }

    // Validate consent
    if (!consentGiven) {
      return NextResponse.json(
        { success: false, error: 'Consent required to subscribe' },
        { status: 400 }
      );
    }

    // Check for duplicate within 24 hours
    const twentyFourHoursAgo = new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString();
    const duplicateCheck = await turso.execute({
      sql: 'SELECT id FROM leads WHERE email = ? AND created_at > ?',
      args: [email.toLowerCase(), twentyFourHoursAgo],
    });

    if (duplicateCheck.rows.length > 0) {
      return NextResponse.json(
        { success: false, error: 'This email is already registered. Check your inbox!' },
        { status: 409 }
      );
    }

    // Extract UTM parameters from query string
    const url = new URL(request.url);
    const utmSource = url.searchParams.get('utm_source') || null;
    const utmMedium = url.searchParams.get('utm_medium') || null;
    const utmCampaign = url.searchParams.get('utm_campaign') || null;
    const utmTerm = url.searchParams.get('utm_term') || null;
    const utmContent = url.searchParams.get('utm_content') || null;

    // Get metadata
    const referrer = request.headers.get('referer') || null;
    const userAgent = request.headers.get('user-agent') || null;
    const landingPage = referrer || url.origin;

    // Generate ID and timestamps
    const id = `lead_${nanoid()}`;
    const now = new Date().toISOString();

    // Insert lead
    await turso.execute({
      sql: `INSERT INTO leads (
        id, email, created_at, updated_at,
        utm_source, utm_medium, utm_campaign, utm_term, utm_content,
        referrer, landing_page, user_agent, ip_address,
        consent_given, subscribed, status
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)`,
      args: [
        id,
        email.toLowerCase(),
        now,
        now,
        utmSource,
        utmMedium,
        utmCampaign,
        utmTerm,
        utmContent,
        referrer,
        landingPage,
        userAgent,
        ip,
        1, // consent_given
        1, // subscribed
        'new', // status
      ],
    });

    return NextResponse.json(
      {
        success: true,
        message: 'Thanks! Check your email for the Diamond Sprint materials.',
        leadId: id,
      },
      { status: 201 }
    );
  } catch (error) {
    console.error('Lead capture error:', error);
    return NextResponse.json(
      { success: false, error: 'An error occurred. Please try again.' },
      { status: 500 }
    );
  }
}

export async function GET(request: NextRequest) {
  try {
    // Lazy import turso to avoid build-time initialization
    const { turso } = await import('@/lib/turso');

    // Check admin authentication
    const authHeader = request.headers.get('authorization');
    const adminKey = process.env.ADMIN_API_KEY;

    if (!authHeader || authHeader !== `Bearer ${adminKey}`) {
      return NextResponse.json(
        { success: false, error: 'Unauthorized' },
        { status: 401 }
      );
    }

    // Parse query parameters
    const url = new URL(request.url);
    const startDate = url.searchParams.get('startDate');
    const endDate = url.searchParams.get('endDate');
    const source = url.searchParams.get('source');
    const status = url.searchParams.get('status');
    const format = url.searchParams.get('format') || 'json';
    const page = parseInt(url.searchParams.get('page') || '1', 10);
    const pageSize = parseInt(url.searchParams.get('pageSize') || '100', 10);

    // Build query
    let sql = 'SELECT * FROM leads WHERE 1=1';
    const args: (string | number)[] = [];

    if (startDate) {
      sql += ' AND created_at >= ?';
      args.push(startDate);
    }

    if (endDate) {
      sql += ' AND created_at <= ?';
      args.push(endDate);
    }

    if (source) {
      sql += ' AND utm_source = ?';
      args.push(source);
    }

    if (status) {
      sql += ' AND status = ?';
      args.push(status);
    }

    sql += ' ORDER BY created_at DESC LIMIT ? OFFSET ?';
    args.push(pageSize, (page - 1) * pageSize);

    // Execute query
    const result = await turso.execute({ sql, args });

    // Get total count
    let countSql = 'SELECT COUNT(*) as total FROM leads WHERE 1=1';
    const countArgs: string[] = [];

    if (startDate) {
      countSql += ' AND created_at >= ?';
      countArgs.push(startDate);
    }

    if (endDate) {
      countSql += ' AND created_at <= ?';
      countArgs.push(endDate);
    }

    if (source) {
      countSql += ' AND utm_source = ?';
      countArgs.push(source);
    }

    if (status) {
      countSql += ' AND status = ?';
      countArgs.push(status);
    }

    const countResult = await turso.execute({ sql: countSql, args: countArgs });
    const total = Number(countResult.rows[0]?.total || 0);

    // Format response
    if (format === 'csv') {
      // Generate CSV
      const headers = [
        'email',
        'created_at',
        'utm_source',
        'utm_medium',
        'utm_campaign',
        'status',
        'referrer',
        'landing_page',
      ];
      const csvRows = [headers.join(',')];

      for (const row of result.rows) {
        const values = headers.map((header) => {
          const value = row[header];
          // Escape commas and quotes
          if (value === null || value === undefined) return '';
          const stringValue = String(value);
          if (stringValue.includes(',') || stringValue.includes('"')) {
            return `"${stringValue.replace(/"/g, '""')}"`;
          }
          return stringValue;
        });
        csvRows.push(values.join(','));
      }

      const csv = csvRows.join('\n');

      return new NextResponse(csv, {
        status: 200,
        headers: {
          'Content-Type': 'text/csv',
          'Content-Disposition': `attachment; filename="leads-${new Date().toISOString().split('T')[0]}.csv"`,
        },
      });
    }

    // JSON response
    return NextResponse.json({
      leads: result.rows,
      total,
      page,
      pageSize,
    });
  } catch (error) {
    console.error('Lead export error:', error);
    return NextResponse.json(
      { success: false, error: 'An error occurred' },
      { status: 500 }
    );
  }
}
</file>

<file path="api/sprint/[dayNumber]/route.ts">
import { NextRequest, NextResponse } from 'next/server';
import { getSprintDay } from '@/lib/content';

// Generate static params for all 30 days at build time
export async function generateStaticParams() {
  return Array.from({ length: 30 }, (_, i) => ({
    dayNumber: String(i + 1),
  }));
}

// Force static generation at build time
export const dynamic = 'force-static';

export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ dayNumber: string }> }
) {
  try {
    const { dayNumber: dayNumberStr } = await params;
    const dayNumber = parseInt(dayNumberStr, 10);

    if (isNaN(dayNumber) || dayNumber < 1 || dayNumber > 30) {
      return NextResponse.json(
        { error: 'Invalid day number' },
        { status: 400 }
      );
    }

    const day = await getSprintDay(dayNumber);

    if (!day) {
      return NextResponse.json(
        { error: 'Day not found' },
        { status: 404 }
      );
    }

    return NextResponse.json({ day });
  } catch (error) {
    console.error('Error fetching sprint day:', error);
    return NextResponse.json(
      { error: 'Failed to fetch sprint day' },
      { status: 500 }
    );
  }
}
</file>

<file path="api/sprint/days/route.ts">
import { NextResponse } from 'next/server';
import { getSprintDays } from '@/lib/content';

// Force static generation at build time
export const dynamic = 'force-static';

export async function GET() {
  try {
    const days = await getSprintDays();
    return NextResponse.json({ days });
  } catch (error) {
    console.error('Error fetching sprint days:', error);
    return NextResponse.json(
      { error: 'Failed to fetch sprint days' },
      { status: 500 }
    );
  }
}
</file>

<file path="app/chat/page.tsx">
"use client";
import { useState, useRef, useEffect } from "react";
import { IconSend, IconBrain, IconUser, IconSparkles, IconPlus, IconTrash, IconMenu2, IconX } from "@tabler/icons-react";
import { useChat } from "@/contexts/ChatContext";
import { motion, AnimatePresence } from "framer-motion";
import { MarkdownMessage } from "@/components/MarkdownMessage";
import { FeatureGuard } from "@/components/FeatureGuard";

export default function ChatPage() {
    return (
        <FeatureGuard>
            <ChatPageContent />
        </FeatureGuard>
    );
}

function ChatPageContent() {
    const { currentSession, sessions, addMessage, createSession, loadSession, deleteSession, isLoading } = useChat();
    const [inputValue, setInputValue] = useState("");
    const [isTyping, setIsTyping] = useState(false);
    const [isSidebarOpen, setIsSidebarOpen] = useState(false);
    const [streamingMessage, setStreamingMessage] = useState("");
    const [displayedMessage, setDisplayedMessage] = useState("");
    const messagesEndRef = useRef<HTMLDivElement>(null);
    const bufferRef = useRef<string>("");
    const animationFrameRef = useRef<number | null>(null);
    const lastUpdateRef = useRef<number>(0);

    const scrollToBottom = () => {
        messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
    };

    useEffect(() => {
        scrollToBottom();
    }, [currentSession?.messages, displayedMessage]);

    // Smooth typewriter effect with optimized rendering
    useEffect(() => {
        if (!streamingMessage) {
            setDisplayedMessage("");
            bufferRef.current = "";
            if (animationFrameRef.current) {
                cancelAnimationFrame(animationFrameRef.current);
                animationFrameRef.current = null;
            }
            return;
        }

        // Update buffer with new content
        bufferRef.current = streamingMessage;

        // Typewriter animation using requestAnimationFrame
        const CHARS_PER_FRAME = 2; // Show 2 characters per frame for smooth appearance
        const MIN_FRAME_DELAY = 16; // ~60fps cap

        const animate = (timestamp: number) => {
            const elapsed = timestamp - lastUpdateRef.current;

            if (elapsed >= MIN_FRAME_DELAY) {
                setDisplayedMessage((prev) => {
                    if (prev.length >= bufferRef.current.length) {
                        return bufferRef.current;
                    }

                    // Add characters smoothly
                    const nextLength = Math.min(
                        prev.length + CHARS_PER_FRAME,
                        bufferRef.current.length
                    );
                    return bufferRef.current.slice(0, nextLength);
                });

                lastUpdateRef.current = timestamp;
            }

            // Continue animation if there's more content to show
            if (displayedMessage.length < bufferRef.current.length) {
                animationFrameRef.current = requestAnimationFrame(animate);
            }
        };

        animationFrameRef.current = requestAnimationFrame(animate);

        return () => {
            if (animationFrameRef.current) {
                cancelAnimationFrame(animationFrameRef.current);
            }
        };
    }, [streamingMessage, displayedMessage.length]);

    // Create a session if none exists
    useEffect(() => {
        if (!isLoading && !currentSession && sessions.length === 0) {
            createSession();
        }
    }, [isLoading, currentSession, sessions.length, createSession]);

    // Cleanup on unmount
    useEffect(() => {
        return () => {
            if (animationFrameRef.current) {
                cancelAnimationFrame(animationFrameRef.current);
            }
        };
    }, []);

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        if (!inputValue.trim() || !currentSession) return;

        const question = inputValue;

        // Add user message
        addMessage(question, 'user');
        setInputValue("");
        setIsTyping(true);
        setStreamingMessage("");

        try {
            // Call the RAG API endpoint
            const response = await fetch('/api/ask', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ question }),
            });

            if (!response.ok) {
                throw new Error('Failed to get response');
            }

            // Read the streaming response and update incrementally
            const reader = response.body?.getReader();
            const decoder = new TextDecoder();
            let fullResponse = '';

            if (reader) {
                while (true) {
                    const { done, value } = await reader.read();
                    if (done) break;

                    const chunk = decoder.decode(value, { stream: true });
                    fullResponse += chunk;
                    setStreamingMessage(fullResponse);
                }
            }

            // Save the complete message
            addMessage(fullResponse, 'assistant');
            setStreamingMessage("");
            setIsTyping(false);
        } catch (error) {
            console.error('Error getting response:', error);
            const errorMsg = "I apologize, but I'm having trouble accessing the book content right now. Please make sure your ANTHROPIC_API_KEY is set in the environment variables.";
            addMessage(errorMsg, 'assistant');
            setStreamingMessage("");
            setIsTyping(false);
        }
    };

    const handleNewChat = () => {
        createSession();
        setIsSidebarOpen(false);
    };

    const handleLoadSession = (sessionId: string) => {
        loadSession(sessionId);
        setIsSidebarOpen(false);
    };

    const handleDeleteSession = (sessionId: string, e: React.MouseEvent) => {
        e.stopPropagation();
        if (confirm('Delete this conversation?')) {
            deleteSession(sessionId);
        }
    };

    const formatTimestamp = (timestamp: string) => {
        const date = new Date(timestamp);
        const now = new Date();
        const diff = now.getTime() - date.getTime();
        const hours = Math.floor(diff / (1000 * 60 * 60));
        const days = Math.floor(hours / 24);

        if (days > 0) {
            return `${days}d ago`;
        } else if (hours > 0) {
            return `${hours}h ago`;
        } else {
            return 'Just now';
        }
    };

    if (isLoading) {
        return (
            <div className="flex items-center justify-center min-h-[60vh]">
                <div className="text-gray-400">Loading chat...</div>
            </div>
        );
    }

    // Welcome message for first session
    const displayMessages = currentSession?.messages?.length === 0 ? [
        {
            id: 'welcome',
            role: 'assistant' as const,
            content: "Welcome! I'm DiamondMindAI, your guide to 'Turning Snowflakes into Diamonds' by Michael Dugan. I can answer questions about identity transformation, nervous system regulation, high-performance under pressure, and the methodologies taught in the book. What would you like to explore?",
            timestamp: new Date().toISOString()
        }
    ] : currentSession?.messages || [];

    return (
        <div className="max-w-7xl mx-auto h-[calc(100vh-12rem)] flex gap-6">
            {/* Mobile Sidebar Toggle */}
            <button
                onClick={() => setIsSidebarOpen(!isSidebarOpen)}
                className="lg:hidden fixed bottom-24 right-6 z-50 w-14 h-14 bg-primary text-black rounded-full flex items-center justify-center shadow-lg hover:bg-primary/90 transition-all"
            >
                {isSidebarOpen ? <IconX className="w-6 h-6" /> : <IconMenu2 className="w-6 h-6" />}
            </button>

            {/* Sidebar - Sessions List */}
            <AnimatePresence>
                {(isSidebarOpen || (typeof window !== 'undefined' && window.innerWidth >= 1024)) && (
                    <motion.div
                        initial={{ x: -300, opacity: 0 }}
                        animate={{ x: 0, opacity: 1 }}
                        exit={{ x: -300, opacity: 0 }}
                        className="fixed lg:relative inset-y-0 left-0 z-40 lg:z-0 w-80 bg-secondary/30 border border-white/10 rounded-xl p-4 overflow-y-auto lg:block"
                        style={{ height: 'calc(100vh - 12rem)' }}
                    >
                        {/* New Chat Button */}
                        <button
                            onClick={handleNewChat}
                            className="w-full mb-4 bg-primary/20 border border-primary/50 text-primary px-4 py-3 rounded-lg hover:bg-primary/30 transition-all flex items-center justify-center gap-2"
                        >
                            <IconPlus className="w-5 h-5" />
                            <span>New Conversation</span>
                        </button>

                        {/* Sessions List */}
                        <div className="space-y-2">
                            <h3 className="text-xs text-gray-400 uppercase tracking-wider mb-2">Conversations</h3>
                            {sessions.length === 0 ? (
                                <p className="text-sm text-gray-500 text-center py-8">No conversations yet</p>
                            ) : (
                                sessions
                                    .sort((a, b) => new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime())
                                    .map((session) => (
                                        <div
                                            key={session.id}
                                            onClick={() => handleLoadSession(session.id)}
                                            className={`group relative p-3 rounded-lg cursor-pointer transition-all ${
                                                currentSession?.id === session.id
                                                    ? 'bg-primary/20 border border-primary/50'
                                                    : 'bg-white/5 border border-white/10 hover:border-primary/30'
                                            }`}
                                        >
                                            <div className="flex items-start justify-between gap-2">
                                                <div className="flex-1 min-w-0">
                                                    <p className="text-sm truncate">{session.title}</p>
                                                    <p className="text-xs text-gray-500 mt-1">
                                                        {formatTimestamp(session.updatedAt)} · {session.messages.length} messages
                                                    </p>
                                                </div>
                                                <button
                                                    onClick={(e) => handleDeleteSession(session.id, e)}
                                                    className="opacity-0 group-hover:opacity-100 p-1 hover:bg-red-500/20 rounded transition-all"
                                                >
                                                    <IconTrash className="w-4 h-4 text-red-400" />
                                                </button>
                                            </div>
                                        </div>
                                    ))
                            )}
                        </div>
                    </motion.div>
                )}
            </AnimatePresence>

            {/* Backdrop for mobile sidebar */}
            {isSidebarOpen && (
                <div
                    onClick={() => setIsSidebarOpen(false)}
                    className="lg:hidden fixed inset-0 bg-black/60 backdrop-blur-sm z-30"
                />
            )}

            {/* Main Chat Area */}
            <div className="flex-1 flex flex-col min-w-0">
                {/* Header */}
                <div className="mb-6">
                    <div className="flex items-center gap-3 mb-2">
                        <div className="relative">
                            <div className="w-12 h-12 bg-gradient-to-br from-primary/40 to-primary/10 rounded-lg flex items-center justify-center">
                                <IconBrain className="w-7 h-7 text-primary" />
                            </div>
                            <div className="absolute inset-0 bg-primary/20 rounded-lg blur-md"></div>
                        </div>
                        <div>
                            <h1 className="text-3xl md:text-4xl font-light">
                                Diamond<span className="text-primary">Mind</span>AI
                            </h1>
                            <p className="text-gray-400 text-sm">Ask me anything about &ldquo;Turning Snowflakes into Diamonds&rdquo;</p>
                        </div>
                    </div>
                </div>

                {/* Chat Messages */}
                <div className="flex-1 overflow-y-auto bg-secondary/20 border border-white/10 rounded-xl p-6 mb-6 space-y-6">
                    {displayMessages.map((message) => (
                        <div
                            key={message.id}
                            className={`flex gap-4 ${message.role === "user" ? "flex-row-reverse" : ""}`}
                        >
                            {/* Avatar */}
                            <div className="flex-shrink-0">
                                {message.role === "assistant" ? (
                                    <div className="w-10 h-10 bg-gradient-to-br from-primary/40 to-primary/10 rounded-lg flex items-center justify-center">
                                        <IconSparkles className="w-5 h-5 text-primary" />
                                    </div>
                                ) : (
                                    <div className="w-10 h-10 bg-gradient-to-br from-gray-600 to-gray-700 rounded-lg flex items-center justify-center">
                                        <IconUser className="w-5 h-5 text-gray-300" />
                                    </div>
                                )}
                            </div>

                            {/* Message Content */}
                            <div className={`flex-1 max-w-2xl ${message.role === "user" ? "text-right" : ""}`}>
                                <div
                                    className={`inline-block px-4 py-3 rounded-lg ${
                                        message.role === "assistant"
                                            ? "bg-secondary/50 border border-white/10"
                                            : "bg-primary/20 border border-primary/30"
                                    }`}
                                >
                                    {message.role === "assistant" ? (
                                        <div className="text-sm md:text-base prose prose-invert max-w-none">
                                            <MarkdownMessage content={message.content} />
                                        </div>
                                    ) : (
                                        <p className="text-sm md:text-base leading-relaxed whitespace-pre-wrap">{message.content}</p>
                                    )}
                                </div>
                                <p className="text-xs text-gray-500 mt-1">
                                    {new Date(message.timestamp).toLocaleTimeString([], {
                                        hour: "2-digit",
                                        minute: "2-digit"
                                    })}
                                </p>
                            </div>
                        </div>
                    ))}

                    {/* Streaming Message */}
                    {isTyping && displayedMessage && (
                        <div className="flex gap-4">
                            <div className="flex-shrink-0">
                                <div className="w-10 h-10 bg-gradient-to-br from-primary/40 to-primary/10 rounded-lg flex items-center justify-center">
                                    <IconSparkles className="w-5 h-5 text-primary" />
                                </div>
                            </div>
                            <div className="flex-1 max-w-2xl">
                                <div className="inline-block px-4 py-3 rounded-lg bg-secondary/50 border border-white/10">
                                    <div className="text-sm md:text-base prose prose-invert max-w-none">
                                        <MarkdownMessage content={displayedMessage} />
                                        {/* Blinking cursor while typing */}
                                        {displayedMessage.length < bufferRef.current.length && (
                                            <span className="inline-block w-[2px] h-4 bg-primary ml-0.5 animate-pulse" />
                                        )}
                                    </div>
                                </div>
                            </div>
                        </div>
                    )}

                    {/* Typing Indicator (when no content yet) */}
                    {isTyping && !displayedMessage && (
                        <div className="flex gap-4">
                            <div className="w-10 h-10 bg-gradient-to-br from-primary/40 to-primary/10 rounded-lg flex items-center justify-center">
                                <IconSparkles className="w-5 h-5 text-primary" />
                            </div>
                            <div className="bg-secondary/50 border border-white/10 px-4 py-3 rounded-lg">
                                <div className="flex gap-1">
                                    <motion.div
                                        animate={{ opacity: [0.3, 1, 0.3] }}
                                        transition={{ duration: 1.5, repeat: Infinity, delay: 0 }}
                                        className="w-2 h-2 bg-primary/60 rounded-full"
                                    />
                                    <motion.div
                                        animate={{ opacity: [0.3, 1, 0.3] }}
                                        transition={{ duration: 1.5, repeat: Infinity, delay: 0.2 }}
                                        className="w-2 h-2 bg-primary/60 rounded-full"
                                    />
                                    <motion.div
                                        animate={{ opacity: [0.3, 1, 0.3] }}
                                        transition={{ duration: 1.5, repeat: Infinity, delay: 0.4 }}
                                        className="w-2 h-2 bg-primary/60 rounded-full"
                                    />
                                </div>
                            </div>
                        </div>
                    )}

                    <div ref={messagesEndRef} />
                </div>

                {/* Input Area */}
                <div className="bg-secondary/30 border border-white/10 rounded-xl p-4">
                    <form onSubmit={handleSubmit} className="flex gap-3">
                        <input
                            type="text"
                            value={inputValue}
                            onChange={(e) => setInputValue(e.target.value)}
                            placeholder="Ask a question about the book..."
                            className="flex-1 bg-black/50 border border-white/10 rounded-lg px-4 py-3 text-white placeholder-gray-500 focus:border-primary focus:outline-none transition-colors"
                        />
                        <button
                            type="submit"
                            disabled={isTyping || !inputValue.trim() || !currentSession}
                            className="bg-primary text-black px-6 py-3 rounded-lg font-medium hover:bg-primary/90 transition-all disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2"
                        >
                            <IconSend className="w-5 h-5" />
                            <span className="hidden sm:inline">Send</span>
                        </button>
                    </form>

                    {/* Suggested Prompts */}
                    {displayMessages.length <= 1 && (
                        <div className="mt-4 flex flex-wrap gap-2">
                            {[
                                "What is the Diamond Transformation Roadmap?",
                                "Explain snowflakes vs diamonds",
                                "How do I stabilize under pressure?",
                                "What makes humans irreplaceable in the AI age?"
                            ].map((prompt, index) => (
                                <button
                                    key={index}
                                    onClick={() => setInputValue(prompt)}
                                    className="text-xs px-3 py-2 bg-white/5 border border-white/10 rounded-lg hover:border-primary/30 hover:bg-white/10 transition-all"
                                >
                                    {prompt}
                                </button>
                            ))}
                        </div>
                    )}
                </div>
            </div>
        </div>
    );
}
</file>

<file path="app/courses/[courseId]/CourseViewer.tsx">
"use client";

import { useState, useEffect, useCallback, useMemo } from "react";
import type { ParsedCourse, CourseSlide } from "@/types/course";
import type { CourseProgress as CourseProgressType } from "@/types/progress";
import ChapterNav from "@/components/course/ChapterNav";
import SlideContent from "@/components/course/SlideContent";
import CourseProgress from "@/components/course/CourseProgress";
import { IconChevronLeft, IconChevronRight, IconNotes, IconCircleCheck } from "@tabler/icons-react";
import {
  getCourseProgress,
  updateCurrentSlide,
  markSlideComplete,
  isSlideCompleted,
} from "@/lib/progress";

interface CourseViewerProps {
  course: ParsedCourse;
}

export default function CourseViewer({ course }: CourseViewerProps) {
  const [currentSlideIndex, setCurrentSlideIndex] = useState(0);
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
  const [showNotes, setShowNotes] = useState(false);
  const [progressData, setProgressData] = useState<CourseProgressType | null>(null);

  // Flatten all slides for easy navigation
  const allSlides = useMemo(() => {
    const slides: (CourseSlide & { chapterTitle: string })[] = [];
    course.chapters.forEach((chapter) => {
      chapter.slides.forEach((slide) => {
        slides.push({
          ...slide,
          chapterTitle: chapter.title,
        });
      });
    });
    return slides;
  }, [course]);

  // Initialize progress on mount
  useEffect(() => {
    const progress = getCourseProgress(course);
    setProgressData(progress);

    // Resume from last position if available
    if (progress.currentSlideId) {
      const slideIndex = allSlides.findIndex(s => s.id === progress.currentSlideId);
      if (slideIndex !== -1) {
        setCurrentSlideIndex(slideIndex);
      }
    }
  }, [course, allSlides]);

  const currentSlide = allSlides[currentSlideIndex];
  const currentChapter = course.chapters.find(
    (ch) => ch.id === currentSlide?.chapterId
  );

  // Update progress when slide changes
  useEffect(() => {
    if (currentSlide) {
      setProgressData(prev => {
        if (!prev) return prev;
        return updateCurrentSlide(prev, currentSlide.id);
      });
    }
  }, [currentSlideIndex, currentSlide]);

  const goToNextSlide = useCallback(() => {
    if (currentSlideIndex < allSlides.length - 1) {
      setCurrentSlideIndex(currentSlideIndex + 1);
      window.scrollTo({ top: 0, behavior: "smooth" });
    }
  }, [currentSlideIndex, allSlides.length]);

  const goToPrevSlide = useCallback(() => {
    if (currentSlideIndex > 0) {
      setCurrentSlideIndex(currentSlideIndex - 1);
      window.scrollTo({ top: 0, behavior: "smooth" });
    }
  }, [currentSlideIndex]);

  const goToSlide = useCallback((slideId: string) => {
    const index = allSlides.findIndex((slide) => slide.id === slideId);
    if (index !== -1) {
      setCurrentSlideIndex(index);
      setMobileMenuOpen(false);
      window.scrollTo({ top: 0, behavior: "smooth" });
    }
  }, [allSlides]);

  // Mark current slide as complete
  const handleMarkComplete = useCallback(() => {
    if (currentSlide && progressData) {
      const updated = markSlideComplete(progressData, currentSlide.id);
      setProgressData(updated);
    }
  }, [currentSlide, progressData]);

  // Keyboard shortcuts
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      // Don't trigger if user is typing in an input
      if (e.target instanceof HTMLInputElement || e.target instanceof HTMLTextAreaElement) {
        return;
      }

      switch (e.key) {
        case "ArrowRight":
        case " ": // Space bar
          e.preventDefault();
          goToNextSlide();
          break;
        case "ArrowLeft":
          e.preventDefault();
          goToPrevSlide();
          break;
        case "n":
        case "N":
          e.preventDefault();
          setShowNotes(!showNotes);
          break;
        case "Escape":
          setMobileMenuOpen(false);
          break;
      }
    };

    window.addEventListener("keydown", handleKeyDown);
    return () => window.removeEventListener("keydown", handleKeyDown);
  }, [goToNextSlide, goToPrevSlide, showNotes]);

  if (!currentSlide) {
    return (
      <div className="min-h-screen bg-black text-white flex items-center justify-center">
        <p>Loading course...</p>
      </div>
    );
  }

  const progress = progressData?.overallProgress || ((currentSlideIndex + 1) / allSlides.length) * 100;

  return (
    <div className="min-h-screen bg-black text-white">
      {/* Header with Progress */}
      <CourseProgress
        course={course}
        currentSlideIndex={currentSlideIndex}
        totalSlides={allSlides.length}
        progress={progress}
        onMenuToggle={() => setMobileMenuOpen(!mobileMenuOpen)}
      />

      <div className="flex relative">
        {/* Chapter Navigation Sidebar (Desktop) */}
        <aside className="hidden lg:block w-80 border-r border-white/10 h-[calc(100vh-4rem)] sticky top-16 overflow-y-auto bg-black">
          <ChapterNav
            chapters={course.chapters}
            currentSlideId={currentSlide.id}
            onSlideSelect={goToSlide}
            progressData={progressData}
          />
        </aside>

        {/* Mobile Chapter Navigation Drawer */}
        {mobileMenuOpen && (
          <div className="fixed inset-0 z-50 lg:hidden">
            <div
              className="absolute inset-0 bg-black/80"
              onClick={() => setMobileMenuOpen(false)}
            />
            <div className="absolute top-16 left-0 right-0 bottom-0 bg-black border-t border-white/10 overflow-y-auto">
              <ChapterNav
                chapters={course.chapters}
                currentSlideId={currentSlide.id}
                onSlideSelect={goToSlide}
                progressData={progressData}
              />
            </div>
          </div>
        )}

        {/* Main Content Area */}
        <main className="flex-1 min-h-[calc(100vh-4rem)]">
          {/* Slide Content */}
          <SlideContent
            slide={currentSlide}
            chapterTitle={currentChapter?.title || ""}
            showNotes={showNotes}
            onToggleNotes={() => setShowNotes(!showNotes)}
          />

          {/* Navigation Controls */}
          <div className="border-t border-white/10 bg-black/50 backdrop-blur-sm sticky bottom-0">
            <div className="max-w-4xl mx-auto px-6 py-4 flex items-center justify-between">
              {/* Previous Button */}
              <button
                onClick={goToPrevSlide}
                disabled={currentSlideIndex === 0}
                className="flex items-center gap-2 px-4 py-2 rounded-lg border border-white/10 hover:border-primary/50 hover:bg-primary/10 transition-all disabled:opacity-30 disabled:cursor-not-allowed disabled:hover:border-white/10 disabled:hover:bg-transparent"
              >
                <IconChevronLeft className="w-5 h-5" />
                <span className="hidden sm:inline">Previous</span>
              </button>

              {/* Center Controls */}
              <div className="flex items-center gap-2">
                {/* Mark Complete Button */}
                {progressData && !isSlideCompleted(progressData, currentSlide.id) ? (
                  <button
                    onClick={handleMarkComplete}
                    className="flex items-center gap-2 px-4 py-2 rounded-lg border border-primary/50 bg-primary/10 hover:bg-primary/20 text-primary transition-all"
                  >
                    <IconCircleCheck className="w-5 h-5" />
                    <span className="hidden sm:inline">Mark Complete</span>
                  </button>
                ) : (
                  <div className="flex items-center gap-2 px-4 py-2 text-green-500">
                    <IconCircleCheck className="w-5 h-5" />
                    <span className="hidden sm:inline text-sm">Completed</span>
                  </div>
                )}

                {/* Notes Toggle */}
                <button
                  onClick={() => setShowNotes(!showNotes)}
                  className={`flex items-center gap-2 px-4 py-2 rounded-lg border transition-all ${
                    showNotes
                      ? "border-primary bg-primary/20 text-primary"
                      : "border-white/10 hover:border-primary/50 hover:bg-primary/10"
                  }`}
                >
                  <IconNotes className="w-5 h-5" />
                  <span className="hidden sm:inline">Notes</span>
                </button>
              </div>

              {/* Next Button */}
              <button
                onClick={goToNextSlide}
                disabled={currentSlideIndex === allSlides.length - 1}
                className="flex items-center gap-2 px-4 py-2 rounded-lg border border-white/10 hover:border-primary/50 hover:bg-primary/10 transition-all disabled:opacity-30 disabled:cursor-not-allowed disabled:hover:border-white/10 disabled:hover:bg-transparent"
              >
                <span className="hidden sm:inline">Next</span>
                <IconChevronRight className="w-5 h-5" />
              </button>
            </div>

            {/* Keyboard Hints */}
            <div className="max-w-4xl mx-auto px-6 pb-2 text-center text-xs text-gray-500">
              Use arrow keys to navigate • Press N for notes
            </div>
          </div>
        </main>
      </div>
    </div>
  );
}
</file>

<file path="app/courses/[courseId]/page.tsx">
import { getCourseContent, getAllCourses } from "@/lib/content";
import { notFound } from "next/navigation";
import CourseViewer from "./CourseViewer";

interface PageProps {
  params: Promise<{
    courseId: string;
  }>;
}

// Generate static params for all courses
export async function generateStaticParams() {
  const courses = await getAllCourses();
  return courses.map((course) => ({
    courseId: course.id,
  }));
}

// Generate metadata for SEO
export async function generateMetadata({ params }: PageProps) {
  const { courseId } = await params;
  const course = await getCourseContent(courseId);

  if (!course) {
    return {
      title: "Course Not Found | Becoming Diamond",
    };
  }

  return {
    title: `${course.title} | Becoming Diamond`,
    description: course.metadata.description || `Learn ${course.title} with Becoming Diamond`,
  };
}

export default async function CoursePage({ params }: PageProps) {
  const { courseId } = await params;
  const course = await getCourseContent(courseId);

  if (!course) {
    notFound();
  }

  return <CourseViewer course={course} />;
}
</file>

<file path="app/courses/page.tsx">
"use client";
import { useState } from "react";
import { IconClock, IconUsers, IconStar, IconProgress, IconLock, IconCheck } from "@tabler/icons-react";
import { useUser } from "@/contexts/UserContext";
import { useCourses, SAMPLE_COURSES } from "@/contexts/CourseContext";
import { motion } from "framer-motion";
import Link from "next/link";
import { FeatureGuard } from "@/components/FeatureGuard";

export default function CoursesPage() {
    return (
        <FeatureGuard>
            <CoursesPageContent />
        </FeatureGuard>
    );
}

function CoursesPageContent() {
    const { user, isLoading: userLoading } = useUser();
    const { enrollments, enrollInCourse, isEnrolled } = useCourses();
    const [enrollingCourse, setEnrollingCourse] = useState<string | null>(null);

    if (userLoading) {
        return (
            <div className="flex items-center justify-center min-h-[60vh]">
                <div className="text-gray-400">Loading courses...</div>
            </div>
        );
    }

    if (!user) {
        return (
            <div className="flex items-center justify-center min-h-[60vh]">
                <div className="text-gray-400">Please log in to view courses.</div>
            </div>
        );
    }

    // Course images by pressure room
    const courseImages = [
        "https://images.unsplash.com/photo-1506126613408-eca07ce68773?q=80&w=800&h=600&fit=crop",
        "https://images.unsplash.com/photo-1499209974431-9dddcece7f88?q=80&w=800&h=600&fit=crop",
        "https://images.unsplash.com/photo-1518531933037-91b2f5f229cc?q=80&w=800&h=600&fit=crop",
        "https://images.unsplash.com/photo-1519834785169-98be25ec3f84?q=80&w=800&h=600&fit=crop",
        "https://images.unsplash.com/photo-1501084291732-13b1ba8f0edc?q=80&w=800&h=600&fit=crop",
    ];

    // Separate courses by enrollment status
    const enrolledCourses = SAMPLE_COURSES.filter(course => isEnrolled(course.id))
        .map(course => {
            const enrollment = enrollments.find(e => e.courseId === course.id);
            return {
                ...course,
                enrollment,
                src: courseImages[course.pressureRoom - 1],
            };
        });

    const availableCourses = SAMPLE_COURSES.filter(course => !isEnrolled(course.id))
        .map(course => ({
            ...course,
            src: courseImages[course.pressureRoom - 1],
            isLocked: course.pressureRoom > user.currentPR,
        }));

    const handleEnroll = (courseId: string) => {
        setEnrollingCourse(courseId);
        enrollInCourse(courseId);
        setTimeout(() => setEnrollingCourse(null), 1000);
    };

    // Calculate stats
    const completedCourses = enrollments.filter(e => e.completedDate).length;
    const totalLessons = enrollments.reduce((sum, e) => sum + e.lessonsCompleted.length, 0);

    return (
        <div className="max-w-7xl mx-auto">
            {/* Page Header */}
            <div className="mb-8">
                <h1 className="text-3xl md:text-4xl font-light mb-2">
                    My <span className="text-primary">Courses</span>
                </h1>
                <p className="text-gray-400">Continue your transformation journey</p>
            </div>

            {/* Stats Overview */}
            <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-12">
                {[
                    { label: "Courses Enrolled", value: enrollments.length.toString(), icon: IconProgress },
                    { label: "Completed", value: completedCourses.toString(), icon: IconStar },
                    { label: "Lessons Done", value: totalLessons.toString(), icon: IconCheck },
                    { label: "Community", value: "2.5k+", icon: IconUsers },
                ].map((stat, index) => (
                    <div
                        key={index}
                        className="bg-secondary/30 border border-white/10 rounded-lg p-6 hover:border-primary/30 transition-all"
                    >
                        <div className="flex items-center gap-3 mb-2">
                            <stat.icon className="w-5 h-5 text-primary" />
                            <span className="text-xs text-gray-400 uppercase tracking-wider">{stat.label}</span>
                        </div>
                        <p className="text-3xl font-light text-primary">{stat.value}</p>
                    </div>
                ))}
            </div>

            {/* Enrolled Courses */}
            {enrolledCourses.length > 0 && (
                <div className="mb-16">
                    <h2 className="text-2xl font-light mb-6">Continue Learning</h2>
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                        {enrolledCourses.map((course) => {
                            const isCompleted = course.enrollment?.completedDate;
                            const progress = course.enrollment?.progress || 0;

                            return (
                                <Link
                                    key={course.id}
                                    href={`/app/courses/${course.id}`}
                                    className="group relative bg-secondary/30 border border-white/10 rounded-xl overflow-hidden hover:border-primary/30 transition-all cursor-pointer block"
                                >
                                    {/* Course Image */}
                                    <div className="relative h-48 overflow-hidden">
                                        <img
                                            src={course.src}
                                            alt={course.title}
                                            className="w-full h-full object-cover group-hover:scale-110 transition-transform duration-500"
                                        />
                                        <div className="absolute inset-0 bg-gradient-to-t from-black via-black/50 to-transparent" />

                                        {/* Status Badge */}
                                        <div className="absolute top-4 right-4">
                                            {isCompleted ? (
                                                <div className="bg-green-500/20 border border-green-500/50 text-green-400 px-3 py-1 rounded-full text-xs font-medium">
                                                    Completed
                                                </div>
                                            ) : (
                                                <div className="bg-primary/20 border border-primary/50 text-primary px-3 py-1 rounded-full text-xs font-medium">
                                                    In Progress
                                                </div>
                                            )}
                                        </div>

                                        {/* Progress Bar */}
                                        {!isCompleted && (
                                            <div className="absolute bottom-0 left-0 right-0 h-1 bg-white/10">
                                                <div
                                                    className="h-full bg-primary transition-all"
                                                    style={{ width: `${progress}%` }}
                                                />
                                            </div>
                                        )}
                                    </div>

                                    {/* Course Info */}
                                    <div className="p-6">
                                        <h3 className="text-xl font-light mb-4 group-hover:text-primary transition-colors">
                                            {course.title}
                                        </h3>

                                        <div className="flex items-center gap-4 text-xs text-gray-400">
                                            <div className="flex items-center gap-1">
                                                <IconClock className="w-4 h-4" />
                                                <span>{course.duration}</span>
                                            </div>
                                            <div className="flex items-center gap-1">
                                                <IconStar className="w-4 h-4 text-yellow-400" />
                                                <span>{course.difficulty}</span>
                                            </div>
                                        </div>

                                        {!isCompleted && (
                                            <div className="mt-4 pt-4 border-t border-white/10">
                                                <div className="flex items-center justify-between text-sm">
                                                    <span className="text-gray-400">Progress</span>
                                                    <span className="text-primary font-medium">{progress}%</span>
                                                </div>
                                            </div>
                                        )}
                                    </div>
                                </Link>
                            );
                        })}
                    </div>
                </div>
            )}

            {/* Available Courses */}
            {availableCourses.length > 0 && (
                <div>
                    <h2 className="text-2xl font-light mb-6">
                        {availableCourses.some(c => !c.isLocked) ? 'Available Courses' : 'Next in Your Journey'}
                    </h2>
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                        {availableCourses.map((course) => {
                            const isLocked = course.isLocked;
                            const isEnrolling = enrollingCourse === course.id;

                            return (
                                <motion.div
                                    key={course.id}
                                    whileHover={!isLocked ? { scale: 1.02 } : {}}
                                    className={`group relative bg-secondary/30 border border-white/10 rounded-xl overflow-hidden hover:border-primary/30 transition-all ${
                                        isLocked ? 'opacity-60 cursor-not-allowed' : 'cursor-pointer'
                                    }`}
                                >
                                    {/* Course Image */}
                                    <div className="relative h-48 overflow-hidden">
                                        <img
                                            src={course.src}
                                            alt={course.title}
                                            className={`w-full h-full object-cover transition-all duration-500 ${
                                                isLocked
                                                    ? 'grayscale'
                                                    : 'group-hover:scale-110'
                                            }`}
                                        />
                                        <div className="absolute inset-0 bg-gradient-to-t from-black via-black/50 to-transparent" />

                                        {/* Locked Badge */}
                                        {isLocked && (
                                            <div className="absolute inset-0 flex items-center justify-center">
                                                <div className="bg-black/80 backdrop-blur-sm border border-white/20 rounded-full p-4">
                                                    <IconLock className="w-8 h-8 text-gray-400" />
                                                </div>
                                            </div>
                                        )}
                                    </div>

                                    {/* Course Info */}
                                    <div className="p-6">
                                        <h3 className="text-xl font-light mb-2 group-hover:text-primary transition-colors">
                                            {course.title}
                                        </h3>
                                        <p className="text-sm text-gray-400 mb-4">{course.description}</p>

                                        <div className="flex items-center gap-4 text-xs text-gray-400 mb-4">
                                            <div className="flex items-center gap-1">
                                                <IconClock className="w-4 h-4" />
                                                <span>{course.duration}</span>
                                            </div>
                                            <div className="flex items-center gap-1">
                                                <IconStar className="w-4 h-4 text-yellow-400" />
                                                <span>{course.difficulty}</span>
                                            </div>
                                        </div>

                                        {isLocked ? (
                                            <div className="pt-4 border-t border-white/10">
                                                <p className="text-xs text-gray-500">
                                                    Complete PR{course.pressureRoom - 1} to unlock
                                                </p>
                                            </div>
                                        ) : (
                                            <motion.button
                                                whileHover={{ scale: 1.02 }}
                                                whileTap={{ scale: 0.98 }}
                                                onClick={() => handleEnroll(course.id)}
                                                disabled={isEnrolling}
                                                className="w-full mt-2 bg-primary/20 border border-primary/50 text-primary px-4 py-2 rounded-lg hover:bg-primary/30 transition-all disabled:opacity-50"
                                            >
                                                {isEnrolling ? 'Enrolling...' : 'Enroll Now'}
                                            </motion.button>
                                        )}
                                    </div>
                                </motion.div>
                            );
                        })}
                    </div>
                </div>
            )}
        </div>
    );
}
</file>

<file path="app/profile/page.tsx">
"use client";
import { useState, useEffect } from "react";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { IconEdit, IconCheck, IconX, IconCamera, IconMail, IconMapPin, IconBriefcase } from "@tabler/icons-react";
import { useUser } from "@/contexts/UserContext";
import { FEATURES } from "@/config/features";

export default function ProfilePage() {
    const { user, updateProfile, isLoading } = useUser();
    const [isEditing, setIsEditing] = useState(false);
    const [formData, setFormData] = useState({
        name: "",
        email: "",
        phone: "",
        location: "",
        occupation: "",
        bio: "",
        website: "",
    });

    // Load user data into form when available
    useEffect(() => {
        if (user) {
            setFormData({
                name: user.name,
                email: user.email,
                phone: "",
                location: user.location || "",
                occupation: "",
                bio: user.bio || "",
                website: user.website || "",
            });
        }
    }, [user]);

    if (isLoading) {
        return (
            <div className="flex items-center justify-center min-h-[60vh]">
                <div className="text-gray-400">Loading profile...</div>
            </div>
        );
    }

    if (!user) {
        return (
            <div className="flex items-center justify-center min-h-[60vh]">
                <div className="text-gray-400">Please log in to view your profile.</div>
            </div>
        );
    }

    // Build stats array based on feature flags
    type StatItem = { label: string; value: string; color: string };
    const stats: StatItem[] = [
        FEATURES.coursesCompleted ? { label: "Courses Completed", value: user.completedPRs.length.toString(), color: "text-green-400" } : null,
        { label: "Active Pressure Room", value: `PR${user.currentPR}`, color: "text-primary" },
        { label: "Current Level", value: user.level, color: "text-purple-400" },
        FEATURES.xpPoints ? { label: "XP Points", value: user.xp.toString(), color: "text-yellow-400" } : null
    ].filter((stat): stat is StatItem => stat !== null); // Remove disabled features

    // Build achievements array based on feature flags
    const achievements = FEATURES.achievements ? [
        { name: "First PR Complete", earned: user.completedPRs.length >= 1 },
        { name: "30-Day Streak", earned: user.streak >= 30 },
        { name: "Community Contributor", earned: user.xp >= 100 },
        { name: "Transformation Leader", earned: user.completedPRs.length >= 3 },
        { name: "Master of Presence", earned: user.level === "Master" },
        { name: "PR Champion", earned: user.completedPRs.length >= 5 }
    ] : [];

    const handleSave = () => {
        // Update user profile with form data
        updateProfile({
            name: formData.name,
            email: formData.email,
            location: formData.location,
            bio: formData.bio,
            website: formData.website,
        });
        setIsEditing(false);
    };

    const handleCancel = () => {
        // Reset form data to user's current data
        setFormData({
            name: user.name,
            email: user.email,
            phone: "",
            location: user.location || "",
            occupation: "",
            bio: user.bio || "",
            website: user.website || "",
        });
        setIsEditing(false);
    };

    // Calculate days since joining
    const daysSinceJoining = Math.floor(
        (Date.now() - new Date(user.joinedDate).getTime()) / (1000 * 60 * 60 * 24)
    );

    // Format join date
    const joinDate = new Date(user.joinedDate).toLocaleDateString('en-US', {
        month: 'long',
        year: 'numeric'
    });

    return (
        <div className="max-w-5xl mx-auto">
            {/* Page Header */}
            <div className="mb-8">
                <h1 className="text-3xl md:text-4xl font-light mb-2">
                    My <span className="text-primary">Profile</span>
                </h1>
                <p className="text-gray-400">Manage your personal information and track your progress</p>
            </div>

            <div className="grid lg:grid-cols-3 gap-6">
                {/* Profile Card */}
                <div className="lg:col-span-1">
                    <div className="bg-secondary/30 border border-white/10 rounded-xl p-6">
                        {/* Avatar */}
                        <div className="relative w-32 h-32 mx-auto mb-4 group cursor-pointer">
                            {user.avatar ? (
                                <img
                                    src={user.avatar}
                                    alt={user.name}
                                    className="w-full h-full rounded-full object-cover"
                                />
                            ) : (
                                <div className="w-full h-full rounded-full bg-gradient-to-br from-primary/40 to-primary/10 flex items-center justify-center text-4xl font-light">
                                    {user.name.split(' ').map(n => n[0]).join('').toUpperCase()}
                                </div>
                            )}
                            <div className="absolute inset-0 rounded-full bg-black/60 opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-center">
                                <IconCamera className="w-8 h-8 text-white" />
                            </div>
                        </div>

                        <h2 className="text-2xl font-light text-center mb-1">{user.name}</h2>
                        <p className="text-sm text-gray-400 text-center mb-4">{user.level}</p>

                        {/* Quick Stats */}
                        <div className="space-y-3 pt-4 border-t border-white/10">
                            <div className="flex items-center justify-between text-sm">
                                <span className="text-gray-400">Current Pressure Room</span>
                                <span className="text-primary font-medium">PR{user.currentPR}</span>
                            </div>
                            <div className="flex items-center justify-between text-sm">
                                <span className="text-gray-400">Member Since</span>
                                <span className="text-white">{joinDate}</span>
                            </div>
                            <div className="flex items-center justify-between text-sm">
                                <span className="text-gray-400">Days Active</span>
                                <span className="text-white">{daysSinceJoining}</span>
                            </div>
                        </div>
                    </div>

                    {/* Stats Grid - Only show if there are stats to display */}
                    {stats.length > 0 && (
                        <div className="mt-6 grid grid-cols-2 gap-3">
                            {stats.map((stat, index) => (
                                <div
                                    key={index}
                                    className="bg-secondary/30 border border-white/10 rounded-lg p-4"
                                >
                                    <p className={`text-2xl font-light ${stat.color}`}>{stat.value}</p>
                                    <p className="text-xs text-gray-400 mt-1">{stat.label}</p>
                                </div>
                            ))}
                        </div>
                    )}
                </div>

                {/* Profile Details */}
                <div className="lg:col-span-2 space-y-6">
                    {/* Personal Information */}
                    <div className="bg-secondary/30 border border-white/10 rounded-xl p-6">
                        <div className="flex items-center justify-between mb-6">
                            <h3 className="text-xl font-light">Personal Information</h3>
                            {!isEditing ? (
                                <button
                                    onClick={() => setIsEditing(true)}
                                    className="flex items-center gap-2 px-4 py-2 bg-primary/20 border border-primary/30 text-primary rounded-lg hover:bg-primary/30 transition-all"
                                >
                                    <IconEdit className="w-4 h-4" />
                                    <span className="text-sm">Edit</span>
                                </button>
                            ) : (
                                <div className="flex gap-2">
                                    <button
                                        onClick={handleSave}
                                        className="flex items-center gap-2 px-4 py-2 bg-green-500/20 border border-green-500/30 text-green-400 rounded-lg hover:bg-green-500/30 transition-all"
                                    >
                                        <IconCheck className="w-4 h-4" />
                                        <span className="text-sm">Save</span>
                                    </button>
                                    <button
                                        onClick={handleCancel}
                                        className="flex items-center gap-2 px-4 py-2 bg-red-500/20 border border-red-500/30 text-red-400 rounded-lg hover:bg-red-500/30 transition-all"
                                    >
                                        <IconX className="w-4 h-4" />
                                        <span className="text-sm">Cancel</span>
                                    </button>
                                </div>
                            )}
                        </div>

                        <div className="grid md:grid-cols-2 gap-6">
                            <div>
                                <Label htmlFor="name" className="text-gray-300 mb-2 block">Full Name</Label>
                                {isEditing ? (
                                    <Input
                                        id="name"
                                        value={formData.name}
                                        onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                                    />
                                ) : (
                                    <div className="flex items-center gap-2 text-white">
                                        <IconBriefcase className="w-4 h-4 text-gray-400" />
                                        {user.name}
                                    </div>
                                )}
                            </div>

                            <div>
                                <Label htmlFor="email" className="text-gray-300 mb-2 block">Email Address</Label>
                                {isEditing ? (
                                    <Input
                                        id="email"
                                        type="email"
                                        value={formData.email}
                                        onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                                    />
                                ) : (
                                    <div className="flex items-center gap-2 text-white">
                                        <IconMail className="w-4 h-4 text-gray-400" />
                                        {user.email || 'Not set'}
                                    </div>
                                )}
                            </div>

                            <div className="md:col-span-2">
                                <Label htmlFor="location" className="text-gray-300 mb-2 block">Location</Label>
                                {isEditing ? (
                                    <Input
                                        id="location"
                                        value={formData.location}
                                        onChange={(e) => setFormData({ ...formData, location: e.target.value })}
                                        placeholder="City, State/Country"
                                    />
                                ) : (
                                    <div className="flex items-center gap-2 text-white">
                                        <IconMapPin className="w-4 h-4 text-gray-400" />
                                        {user.location || 'Not set'}
                                    </div>
                                )}
                            </div>

                            <div className="md:col-span-2">
                                <Label htmlFor="website" className="text-gray-300 mb-2 block">Website</Label>
                                {isEditing ? (
                                    <Input
                                        id="website"
                                        type="url"
                                        value={formData.website}
                                        onChange={(e) => setFormData({ ...formData, website: e.target.value })}
                                        placeholder="https://yourwebsite.com"
                                    />
                                ) : (
                                    <div className="flex items-center gap-2 text-white">
                                        {user.website || 'Not set'}
                                    </div>
                                )}
                            </div>

                            <div className="md:col-span-2">
                                <Label htmlFor="bio" className="text-gray-300 mb-2 block">Bio</Label>
                                {isEditing ? (
                                    <textarea
                                        id="bio"
                                        value={formData.bio}
                                        onChange={(e) => setFormData({ ...formData, bio: e.target.value })}
                                        rows={3}
                                        className="w-full bg-black/50 border border-white/10 rounded-lg px-4 py-3 text-white placeholder-gray-500 focus:border-primary focus:outline-none transition-colors"
                                        placeholder="Tell us about yourself..."
                                    />
                                ) : (
                                    <p className="text-white">{user.bio || 'No bio yet'}</p>
                                )}
                            </div>
                        </div>
                    </div>

                    {/* Achievements - Only show if feature is enabled */}
                    {FEATURES.achievements && achievements.length > 0 && (
                        <div className="bg-secondary/30 border border-white/10 rounded-xl p-6">
                            <h3 className="text-xl font-light mb-6">Achievements</h3>

                            <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                                {achievements.map((achievement, index) => (
                                    <div
                                        key={index}
                                        className={`text-center p-4 rounded-lg border transition-all ${
                                            achievement.earned
                                                ? "bg-primary/10 border-primary/30"
                                                : "bg-black/20 border-white/10 opacity-40"
                                        }`}
                                    >
                                        <div className="text-3xl mb-2">
                                            {achievement.earned ? "★" : "☆"}
                                        </div>
                                        <p className="text-xs text-gray-300">{achievement.name}</p>
                                    </div>
                                ))}
                            </div>
                        </div>
                    )}
                </div>
            </div>
        </div>
    );
}
</file>

<file path="app/settings/page.tsx">
"use client";
import { useState } from "react";
import { Tabs } from "@/components/ui/tabs";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { IconBell, IconLock, IconPalette, IconShield, IconCreditCard } from "@tabler/icons-react";
import { FeatureGuard } from "@/components/FeatureGuard";

export default function SettingsPage() {
    return (
        <FeatureGuard>
            <SettingsPageContent />
        </FeatureGuard>
    );
}

function SettingsPageContent() {
    const [emailNotifications, setEmailNotifications] = useState(true);
    const [pushNotifications, setPushNotifications] = useState(true);
    const [courseReminders, setCourseReminders] = useState(true);
    const [communityUpdates, setCommunityUpdates] = useState(false);
    const [darkMode, setDarkMode] = useState(true);

    const tabs = [
        {
            title: "Notifications",
            value: "notifications",
            content: (
                <div className="space-y-6">
                    <div>
                        <h3 className="text-xl font-light mb-4 flex items-center gap-2">
                            <IconBell className="w-5 h-5 text-primary" />
                            Notification Preferences
                        </h3>

                        <div className="space-y-4">
                            {[
                                {
                                    label: "Email Notifications",
                                    description: "Receive updates and course information via email",
                                    value: emailNotifications,
                                    onChange: setEmailNotifications
                                },
                                {
                                    label: "Push Notifications",
                                    description: "Get real-time updates in your browser",
                                    value: pushNotifications,
                                    onChange: setPushNotifications
                                },
                                {
                                    label: "Course Reminders",
                                    description: "Receive reminders for upcoming lessons and deadlines",
                                    value: courseReminders,
                                    onChange: setCourseReminders
                                },
                                {
                                    label: "Community Updates",
                                    description: "Stay informed about community events and discussions",
                                    value: communityUpdates,
                                    onChange: setCommunityUpdates
                                }
                            ].map((setting, index) => (
                                <div
                                    key={index}
                                    className="flex flex-col sm:flex-row sm:items-center justify-between gap-3 p-4 bg-secondary/30 border border-white/10 rounded-lg"
                                >
                                    <div className="flex-1">
                                        <p className="text-white font-light">{setting.label}</p>
                                        <p className="text-sm text-gray-400 mt-1">{setting.description}</p>
                                    </div>
                                    <button
                                        onClick={() => setting.onChange(!setting.value)}
                                        className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors flex-shrink-0 ${
                                            setting.value ? "bg-primary" : "bg-gray-600"
                                        }`}
                                    >
                                        <span
                                            className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                                                setting.value ? "translate-x-6" : "translate-x-1"
                                            }`}
                                        />
                                    </button>
                                </div>
                            ))}
                        </div>
                    </div>
                </div>
            )
        },
        {
            title: "Security",
            value: "security",
            content: (
                <div className="space-y-6">
                    <div>
                        <h3 className="text-xl font-light mb-4 flex items-center gap-2">
                            <IconLock className="w-5 h-5 text-primary" />
                            Security Settings
                        </h3>

                        <div className="space-y-6">
                            <div className="bg-secondary/30 border border-white/10 rounded-lg p-4 sm:p-6">
                                <h4 className="text-lg font-light mb-4">Change Password</h4>
                                <div className="space-y-4">
                                    <div>
                                        <Label htmlFor="current-password" className="text-gray-300">Current Password</Label>
                                        <Input id="current-password" type="password" className="mt-2" />
                                    </div>
                                    <div>
                                        <Label htmlFor="new-password" className="text-gray-300">New Password</Label>
                                        <Input id="new-password" type="password" className="mt-2" />
                                    </div>
                                    <div>
                                        <Label htmlFor="confirm-password" className="text-gray-300">Confirm New Password</Label>
                                        <Input id="confirm-password" type="password" className="mt-2" />
                                    </div>
                                    <button className="bg-primary text-black px-6 py-2 rounded-lg hover:bg-primary/90 transition-all w-full sm:w-auto">
                                        Update Password
                                    </button>
                                </div>
                            </div>

                            <div className="bg-secondary/30 border border-white/10 rounded-lg p-4 sm:p-6">
                                <h4 className="text-lg font-light mb-2 flex items-center gap-2">
                                    <IconShield className="w-5 h-5 text-green-400" />
                                    Two-Factor Authentication
                                </h4>
                                <p className="text-sm text-gray-400 mb-4">
                                    Add an extra layer of security to your account
                                </p>
                                <button className="bg-green-500/20 border border-green-500/30 text-green-400 px-6 py-2 rounded-lg hover:bg-green-500/30 transition-all w-full sm:w-auto">
                                    Enable 2FA
                                </button>
                            </div>

                            <div className="bg-secondary/30 border border-white/10 rounded-lg p-4 sm:p-6">
                                <h4 className="text-lg font-light mb-2">Active Sessions</h4>
                                <p className="text-sm text-gray-400 mb-4">Manage your active login sessions</p>
                                <div className="space-y-2">
                                    <div className="flex flex-col sm:flex-row sm:items-center justify-between gap-2 p-3 bg-black/30 rounded-lg">
                                        <div>
                                            <p className="text-sm text-white">Chrome on MacOS</p>
                                            <p className="text-xs text-gray-500">Los Angeles, CA - Current session</p>
                                        </div>
                                        <span className="text-xs text-green-400">Active</span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            )
        },
        {
            title: "Appearance",
            value: "appearance",
            content: (
                <div className="space-y-6">
                    <div>
                        <h3 className="text-xl font-light mb-4 flex items-center gap-2">
                            <IconPalette className="w-5 h-5 text-primary" />
                            Appearance Settings
                        </h3>

                        <div className="bg-secondary/30 border border-white/10 rounded-lg p-4 sm:p-6">
                            <div className="flex flex-col sm:flex-row sm:items-center justify-between gap-3 mb-6">
                                <div className="flex-1">
                                    <h4 className="text-lg font-light">Dark Mode</h4>
                                    <p className="text-sm text-gray-400 mt-1">
                                        Use dark theme across the application
                                    </p>
                                </div>
                                <button
                                    onClick={() => setDarkMode(!darkMode)}
                                    className={`relative inline-flex h-6 w-11 items-center rounded-full transition-colors flex-shrink-0 ${
                                        darkMode ? "bg-primary" : "bg-gray-600"
                                    }`}
                                >
                                    <span
                                        className={`inline-block h-4 w-4 transform rounded-full bg-white transition-transform ${
                                            darkMode ? "translate-x-6" : "translate-x-1"
                                        }`}
                                    />
                                </button>
                            </div>

                            <div className="pt-6 border-t border-white/10">
                                <h4 className="text-lg font-light mb-4">Theme Color</h4>
                                <div className="grid grid-cols-2 sm:grid-cols-4 gap-3">
                                    {[
                                        { name: "Cyan", color: "#4fc3f7" },
                                        { name: "Purple", color: "#9333ea" },
                                        { name: "Green", color: "#10b981" },
                                        { name: "Orange", color: "#f59e0b" }
                                    ].map((theme, index) => (
                                        <button
                                            key={index}
                                            className="flex flex-col items-center gap-2 p-3 bg-black/30 border border-white/10 rounded-lg hover:border-primary/30 transition-all"
                                        >
                                            <div
                                                className="w-12 h-12 rounded-full"
                                                style={{ backgroundColor: theme.color }}
                                            />
                                            <span className="text-xs text-gray-400">{theme.name}</span>
                                        </button>
                                    ))}
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            )
        },
        {
            title: "Billing",
            value: "billing",
            content: (
                <div className="space-y-6">
                    <div>
                        <h3 className="text-xl font-light mb-4 flex items-center gap-2">
                            <IconCreditCard className="w-5 h-5 text-primary" />
                            Billing & Subscription
                        </h3>

                        <div className="space-y-6">
                            <div className="bg-gradient-to-br from-primary/20 to-primary/5 border border-primary/30 rounded-lg p-4 sm:p-6">
                                <div className="flex flex-col sm:flex-row sm:items-start justify-between gap-3 mb-4">
                                    <div>
                                        <h4 className="text-lg font-light">Full Program</h4>
                                        <p className="text-sm text-gray-400 mt-1">Active subscription</p>
                                    </div>
                                    <span className="px-3 py-1 bg-green-500/20 border border-green-500/30 text-green-400 rounded-full text-xs inline-block w-fit">
                                        Active
                                    </span>
                                </div>
                                <div className="flex items-center justify-between mb-2">
                                    <span className="text-gray-400">Amount</span>
                                    <span className="text-2xl font-light text-primary">$497</span>
                                </div>
                                <div className="flex items-center justify-between text-sm">
                                    <span className="text-gray-400">Next billing date</span>
                                    <span className="text-white">February 1, 2025</span>
                                </div>
                            </div>

                            <div className="bg-secondary/30 border border-white/10 rounded-lg p-4 sm:p-6">
                                <h4 className="text-lg font-light mb-4">Payment Method</h4>
                                <div className="flex flex-col sm:flex-row sm:items-center justify-between gap-3 p-4 bg-black/30 border border-white/10 rounded-lg">
                                    <div className="flex items-center gap-3">
                                        <div className="w-10 h-7 bg-gradient-to-r from-blue-600 to-blue-400 rounded flex items-center justify-center text-white text-xs font-bold flex-shrink-0">
                                            VISA
                                        </div>
                                        <div>
                                            <p className="text-sm text-white">•••• •••• •••• 4242</p>
                                            <p className="text-xs text-gray-500">Expires 12/26</p>
                                        </div>
                                    </div>
                                    <button className="text-sm text-primary hover:underline">Update</button>
                                </div>
                            </div>

                            <div className="bg-secondary/30 border border-white/10 rounded-lg p-4 sm:p-6">
                                <h4 className="text-lg font-light mb-4">Billing History</h4>
                                <div className="space-y-2">
                                    {[
                                        { date: "Jan 1, 2025", amount: "$497", status: "Paid" },
                                        { date: "Dec 1, 2024", amount: "$497", status: "Paid" }
                                    ].map((invoice, index) => (
                                        <div
                                            key={index}
                                            className="flex flex-col sm:flex-row sm:items-center justify-between gap-2 sm:gap-4 p-3 bg-black/30 rounded-lg"
                                        >
                                            <span className="text-sm text-gray-400">{invoice.date}</span>
                                            <div className="flex items-center gap-4">
                                                <span className="text-sm text-white">{invoice.amount}</span>
                                                <span className="text-xs text-green-400">{invoice.status}</span>
                                                <button className="text-xs text-primary hover:underline">Download</button>
                                            </div>
                                        </div>
                                    ))}
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            )
        }
    ];

    return (
        <div className="max-w-5xl mx-auto">
            {/* Page Header */}
            <div className="mb-8">
                <h1 className="text-3xl md:text-4xl font-light mb-2">
                    <span className="text-primary">Settings</span>
                </h1>
                <p className="text-gray-400">Manage your account preferences and settings</p>
            </div>

            <Tabs
                tabs={tabs}
                containerClassName="mb-8"
                activeTabClassName="bg-primary/20 border-primary/30"
                tabClassName="text-gray-400 hover:text-white transition-colors"
                contentClassName="mt-8"
            />
        </div>
    );
}
</file>

<file path="app/sprint/dashboard/page.tsx">
'use client';

import { useEffect, useState } from 'react';
import { isDayAccessible, isDayCompleted, getProgressStats } from '@/lib/sprint-progress';
import ProgressBar from '@/components/sprint/ProgressBar';
import DayCard from '@/components/sprint/DayCard';
import { motion } from 'framer-motion';

interface DayData {
  slug: string;
  frontmatter: {
    day: number;
    title: string;
    subtitle: string;
    duration: string;
    [key: string]: unknown;
  };
  content: string;
}

export default function SprintDashboardPage() {
  const [days, setDays] = useState<DayData[]>([]);
  const [stats, setStats] = useState<ReturnType<typeof getProgressStats> | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    async function loadData() {
      try {
        const response = await fetch('/api/sprint/days');
        const data = await response.json();
        setDays(data.days || []);
        setStats(getProgressStats());
      } catch (error) {
        console.error('Error loading sprint days:', error);
      } finally {
        setLoading(false);
      }
    }

    loadData();
  }, []);

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-gray-400">Loading your sprint...</div>
      </div>
    );
  }

  // Group days by week
  const weeks = [
    { name: 'Week 1: Foundation', days: days.slice(0, 7) },
    { name: 'Week 2: Momentum', days: days.slice(7, 14) },
    { name: 'Week 3: Acceleration', days: days.slice(14, 21) },
    { name: 'Week 4: Mastery', days: days.slice(21, 28) },
    { name: 'Final Push', days: days.slice(28, 30) },
  ];

  return (
    <div className="max-w-6xl mx-auto px-4 py-8">
      {/* Header */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="mb-8"
      >
        <h1 className="text-3xl font-light mb-2">
          Your <span className="text-primary">30 Day Sprint</span>
        </h1>
        <p className="text-gray-400">
          Track your progress through all 30 days of transformation
        </p>
      </motion.div>

      {/* Progress Overview */}
      {stats && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.1 }}
          className="mb-12 bg-black border border-gray-800 rounded-lg p-6"
        >
          <ProgressBar
            completed={stats.completedDays}
            total={stats.totalDays}
          />
        </motion.div>
      )}

      {/* Weeks */}
      {weeks.map((week, weekIndex) => (
        <motion.div
          key={week.name}
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.2 + weekIndex * 0.1 }}
          className="mb-12"
        >
          <h2 className="text-2xl font-light mb-6 pb-2 border-b border-gray-800">
            {week.name}
          </h2>

          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
            {week.days.map((day, dayIndex) => {
              const dayNumber = (day.frontmatter.day as number) || 0;
              return (
                <DayCard
                  key={day.slug}
                  day={dayNumber}
                  title={day.frontmatter.title}
                  subtitle={day.frontmatter.subtitle as string}
                  duration={(day.frontmatter.duration as string) || '15 minutes'}
                  isCompleted={isDayCompleted(dayNumber)}
                  isAccessible={isDayAccessible(dayNumber)}
                  index={dayIndex}
                />
              );
            })}
          </div>
        </motion.div>
      ))}

      {/* Empty State */}
      {days.length === 0 && (
        <div className="text-center py-12">
          <p className="text-gray-400 mb-4">No sprint content available yet</p>
          <p className="text-sm text-gray-500">
            Content will be added soon. Check back later!
          </p>
        </div>
      )}
    </div>
  );
}
</file>

<file path="app/sprint/day/[dayNumber]/page.tsx">
'use client';

import { useEffect, useState } from 'react';
import { useRouter, useParams } from 'next/navigation';
import Link from 'next/link';
import { motion } from 'framer-motion';
import {
  isDayAccessible,
  isDayCompleted,
  markDayComplete,
} from '@/lib/sprint-progress';
import {
  IconArrowLeft,
  IconArrowRight,
  IconCheck,
} from '@tabler/icons-react';

interface DayData {
  slug: string;
  frontmatter: {
    day: number;
    title: string;
    subtitle: string;
    duration: string;
    difficulty: string;
    [key: string]: unknown;
  };
  content: string;
}

export default function SprintDayPage() {
  const params = useParams();
  const router = useRouter();
  const dayNumber = parseInt(params.dayNumber as string, 10);

  const [day, setDay] = useState<DayData | null>(null);
  const [isCompleted, setIsCompleted] = useState(false);
  const [_isAccessible, setIsAccessible] = useState(false);
  const [loading, setLoading] = useState(true);
  const [completing, setCompleting] = useState(false);

  useEffect(() => {
    async function loadDay() {
      try {
        // Check accessibility first
        const accessible = isDayAccessible(dayNumber);
        const completed = isDayCompleted(dayNumber);

        setIsAccessible(accessible);
        setIsCompleted(completed);

        if (!accessible) {
          // Redirect to overview if not accessible
          router.push('/app/sprint');
          return;
        }

        const response = await fetch(`/api/sprint/${dayNumber}`);
        const data = await response.json();

        if (!data.day) {
          router.push('/app/sprint/dashboard');
          return;
        }

        setDay(data.day);
      } catch (error) {
        console.error('Error loading day:', error);
      } finally {
        setLoading(false);
      }
    }

    if (dayNumber && !isNaN(dayNumber)) {
      loadDay();
    }
  }, [dayNumber, router]);

  const handleMarkComplete = () => {
    try {
      setCompleting(true);
      markDayComplete(dayNumber);
      setIsCompleted(true);

      // Show success message briefly, then allow navigation
      setTimeout(() => {
        setCompleting(false);
      }, 500);
    } catch (error) {
      console.error('Error marking day complete:', error);
      setCompleting(false);
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-gray-400">Loading...</div>
      </div>
    );
  }

  if (!day) {
    return null;
  }

  const hasPrevious = dayNumber > 1;
  const hasNext = dayNumber < 30;

  return (
    <div className="max-w-4xl mx-auto px-4 py-8">
      {/* Navigation Header */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="flex items-center justify-between mb-8"
      >
        <Link
          href="/app/sprint/dashboard"
          className="flex items-center gap-2 text-gray-400 hover:text-primary transition-colors"
        >
          <IconArrowLeft size={20} />
          All Days
        </Link>

        <div className="flex items-center gap-2">
          {hasPrevious && (
            <Link
              href={`/app/sprint/day/${dayNumber - 1}`}
              className="p-2 text-gray-400 hover:text-primary transition-colors"
            >
              <IconArrowLeft size={20} />
            </Link>
          )}
          <span className="text-sm text-gray-500 px-3">
            Day {dayNumber} of 30
          </span>
          {hasNext && isDayCompleted(dayNumber) && (
            <Link
              href={`/app/sprint/day/${dayNumber + 1}`}
              className="p-2 text-gray-400 hover:text-primary transition-colors"
            >
              <IconArrowRight size={20} />
            </Link>
          )}
        </div>
      </motion.div>

      {/* Day Header */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.1 }}
        className="mb-6"
      >
        <div className="flex items-center gap-3 mb-3">
          <div className="w-12 h-12 rounded-full bg-primary/20 border border-primary flex items-center justify-center text-primary font-medium">
            {dayNumber}
          </div>
          <div>
            <p className="text-xs text-gray-500 mb-1">
              {day.frontmatter.duration} · {day.frontmatter.difficulty}
            </p>
            <h1 className="text-2xl font-light">{day.frontmatter.title}</h1>
          </div>
        </div>
        <p className="text-base text-gray-400">{day.frontmatter.subtitle}</p>
      </motion.div>

      {/* Content */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.2 }}
        className="prose prose-sm prose-invert prose-primary max-w-none mb-10 leading-relaxed"
        dangerouslySetInnerHTML={{ __html: day.content }}
      />

      {/* Mark Complete Button */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ delay: 0.3 }}
        className="sticky bottom-8 bg-black/80 backdrop-blur-sm border border-gray-800 rounded-lg p-4"
      >
        <div className="flex items-center justify-between">
          <div>
            {isCompleted ? (
              <div className="flex items-center gap-2 text-primary text-sm">
                <IconCheck size={16} />
                <span className="font-medium">Day {dayNumber} Complete!</span>
              </div>
            ) : (
              <p className="text-gray-400 text-sm">
                Finished this day&apos;s content?
              </p>
            )}
          </div>

          <div className="flex items-center gap-3">
            {!isCompleted && (
              <button
                onClick={handleMarkComplete}
                disabled={completing}
                className="flex items-center gap-2 bg-primary text-black px-4 py-2 rounded-lg text-sm font-medium hover:bg-primary/90 transition-all disabled:opacity-50"
              >
                <IconCheck size={16} />
                Mark Complete
              </button>
            )}

            {isCompleted && hasNext && (
              <Link
                href={`/app/sprint/day/${dayNumber + 1}`}
                className="flex items-center gap-2 bg-primary text-black px-4 py-2 rounded-lg text-sm font-medium hover:bg-primary/90 transition-all"
              >
                Next Day
                <IconArrowRight size={16} />
              </Link>
            )}

            {isCompleted && !hasNext && (
              <Link
                href="/app/sprint"
                className="flex items-center gap-2 bg-primary text-black px-4 py-2 rounded-lg text-sm font-medium hover:bg-primary/90 transition-all"
              >
                View Overview
              </Link>
            )}
          </div>
        </div>
      </motion.div>
    </div>
  );
}
</file>

<file path="app/sprint/page.tsx">
'use client';

import { useEffect, useState } from 'react';
import { motion } from 'framer-motion';
import Link from 'next/link';
import { getProgressStats } from '@/lib/sprint-progress';
import ProgressBar from '@/components/sprint/ProgressBar';
import StatsCard from '@/components/sprint/StatsCard';
import {
  IconTrophy,
  IconFlame,
  IconTarget,
  IconCalendar,
  IconArrowRight,
} from '@tabler/icons-react';

export default function SprintOverviewPage() {
  const [stats, setStats] = useState<ReturnType<typeof getProgressStats> | null>(null);
  const [mounted, setMounted] = useState(false);

  useEffect(() => {
    setMounted(true);
    setStats(getProgressStats());
  }, []);

  if (!mounted || !stats) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-gray-400">Loading...</div>
      </div>
    );
  }

  const isNotStarted = stats.status === 'not_started';
  const isCompleted = stats.status === 'completed';

  return (
    <div className="max-w-6xl mx-auto px-4 py-8">
      {/* Hero Section */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6 }}
        className="text-center mb-12"
      >
        <h1 className="text-4xl md:text-5xl font-light mb-4">
          30 Day <span className="text-primary">Transformation</span> Sprint
        </h1>
        <p className="text-xl text-gray-400 mb-8 max-w-2xl mx-auto">
          Transform into your diamond self through 30 days of focused, intentional growth.
        </p>

        {isNotStarted && (
          <motion.div
            initial={{ opacity: 0, scale: 0.95 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ delay: 0.3 }}
          >
            <Link
              href="/app/sprint/day/1"
              className="inline-flex items-center gap-2 bg-primary text-black px-8 py-4 rounded-lg font-medium hover:bg-primary/90 transition-all text-lg"
            >
              Start Your Journey
              <IconArrowRight size={20} />
            </Link>
          </motion.div>
        )}

        {!isNotStarted && !isCompleted && (
          <motion.div
            initial={{ opacity: 0, scale: 0.95 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ delay: 0.3 }}
          >
            <Link
              href={`/app/sprint/day/${stats.currentDay}`}
              className="inline-flex items-center gap-2 bg-primary text-black px-8 py-4 rounded-lg font-medium hover:bg-primary/90 transition-all text-lg"
            >
              Continue to Day {stats.currentDay}
              <IconArrowRight size={20} />
            </Link>
          </motion.div>
        )}

        {isCompleted && (
          <motion.div
            initial={{ opacity: 0, scale: 0.95 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{ delay: 0.3 }}
            className="inline-flex items-center gap-3 bg-primary/20 border border-primary px-8 py-4 rounded-lg text-primary text-lg"
          >
            <IconTrophy size={24} />
            Sprint Completed!
          </motion.div>
        )}
      </motion.div>

      {/* Progress Section */}
      {!isNotStarted && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5, delay: 0.2 }}
          className="mb-12"
        >
          <div className="bg-black border border-gray-800 rounded-lg p-8">
            <h2 className="text-2xl font-light mb-6">Your Progress</h2>

            <ProgressBar
              completed={stats.completedDays}
              total={stats.totalDays}
              className="mb-8"
            />

            <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
              <StatsCard
                title="Days Completed"
                value={stats.completedDays}
                subtitle={`${stats.remainingDays} remaining`}
                icon={<IconCheck size={32} />}
                delay={0.3}
              />
              <StatsCard
                title="Current Day"
                value={stats.currentDay}
                subtitle="of 30 days"
                icon={<IconTarget size={32} />}
                delay={0.4}
              />
              <StatsCard
                title="Completion"
                value={`${Math.round(stats.completionPercentage)}%`}
                subtitle="overall progress"
                icon={<IconTrophy size={32} />}
                delay={0.5}
              />
              <StatsCard
                title="Days Active"
                value={stats.daysInProgress}
                subtitle="since enrollment"
                icon={<IconCalendar size={32} />}
                delay={0.6}
              />
            </div>
          </div>
        </motion.div>
      )}

      {/* Quick Links */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5, delay: 0.4 }}
        className="grid grid-cols-1 md:grid-cols-2 gap-6"
      >
        <Link
          href="/app/sprint/dashboard"
          className="block p-6 bg-black border border-gray-800 rounded-lg hover:border-primary transition-all group"
        >
          <div className="flex items-start justify-between mb-4">
            <div>
              <h3 className="text-xl font-light mb-2 group-hover:text-primary transition-colors">
                View All Days
              </h3>
              <p className="text-sm text-gray-400">
                See your complete 30-day journey and track which days you&apos;ve completed
              </p>
            </div>
            <IconArrowRight className="text-primary opacity-0 group-hover:opacity-100 transition-opacity" size={24} />
          </div>
        </Link>

        <div className="p-6 bg-black border border-gray-800 rounded-lg">
          <h3 className="text-xl font-light mb-2">What to Expect</h3>
          <ul className="space-y-2 text-sm text-gray-400">
            <li className="flex items-center gap-2">
              <IconFlame size={16} className="text-primary" />
              Daily 15-20 minute lessons
            </li>
            <li className="flex items-center gap-2">
              <IconTarget size={16} className="text-primary" />
              Practical exercises and challenges
            </li>
            <li className="flex items-center gap-2">
              <IconTrophy size={16} className="text-primary" />
              Progressive unlocking system
            </li>
          </ul>
        </div>
      </motion.div>

      {/* Info Section */}
      {isNotStarted && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.6 }}
          className="mt-12 p-6 bg-primary/5 border border-primary/20 rounded-lg"
        >
          <h3 className="text-lg font-medium mb-3 text-primary">Before You Begin</h3>
          <p className="text-gray-300 mb-4">
            This is a 30-day commitment to your transformation. Each day builds on the previous one,
            so consistency is key. You&apos;ll need 15-20 minutes per day.
          </p>
          <p className="text-gray-400 text-sm">
            Days unlock progressively—you must complete each day before moving to the next.
            This ensures you build a solid foundation for lasting change.
          </p>
        </motion.div>
      )}
    </div>
  );
}

function IconCheck({ size = 32 }: { size?: number }) {
  return <IconTrophy size={size} />;
}
</file>

<file path="app/support/page.tsx">
"use client";
import { useState } from "react";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { FeatureGuard } from "@/components/FeatureGuard";
import {
    IconQuestionMark,
    IconBook,
    IconMail,
    IconBrandDiscord,
    IconSearch,
    IconChevronDown,
    IconChevronUp,
    IconHeadset
} from "@tabler/icons-react";

function SupportPageContent() {
    const [expandedFaq, setExpandedFaq] = useState<number | null>(null);
    const [searchQuery, setSearchQuery] = useState("");

    const faqs = [
        {
            question: "How do I access my course materials?",
            answer: "Navigate to the Courses page from the left sidebar. Click on any enrolled course to access lessons, videos, and downloadable resources."
        },
        {
            question: "What is the Diamond Operating System?",
            answer: "The Diamond Operating System is our comprehensive methodology for nervous system regulation and identity transformation. It teaches you to convert pressure into clarity and build unshakable presence."
        },
        {
            question: "How do the 5 Pressure Rooms work?",
            answer: "The 5 Pressure Rooms are progressive transformational stages: PR I (Stabilize), PR II (Shift), PR III (Strengthen), PR IV (Shine), and PR V (Synthesize). Each Pressure Room builds upon the previous one to create lasting change."
        },
        {
            question: "Can I change my subscription plan?",
            answer: "Yes! Go to Settings > Billing to view available plans and make changes. Contact support if you need assistance choosing the right plan."
        },
        {
            question: "How do I contact Michael directly?",
            answer: "VIP tier members have direct Voxer access. Full Program members can connect during live coaching calls. Otherwise, reach out through our community forum or support channels."
        },
        {
            question: "What if I miss a live session?",
            answer: "All live sessions are recorded and available in your course library within 24 hours. You'll receive an email notification when recordings are ready."
        }
    ];

    const resources = [
        {
            title: "Getting Started Guide",
            description: "New to Becoming Diamond? Start here for a comprehensive overview.",
            icon: IconBook,
            color: "text-blue-400"
        },
        {
            title: "Knowledge Base",
            description: "Browse articles and tutorials about the Diamond methodology.",
            icon: IconQuestionMark,
            color: "text-purple-400"
        },
        {
            title: "Community Forum",
            description: "Connect with other members and share your transformation journey.",
            icon: IconBrandDiscord,
            color: "text-green-400"
        },
        {
            title: "Live Support",
            description: "Chat with our support team Monday-Friday, 9am-5pm PST.",
            icon: IconHeadset,
            color: "text-orange-400"
        }
    ];

    const filteredFaqs = faqs.filter(faq =>
        faq.question.toLowerCase().includes(searchQuery.toLowerCase()) ||
        faq.answer.toLowerCase().includes(searchQuery.toLowerCase())
    );

    return (
        <div className="max-w-5xl mx-auto">
            {/* Page Header */}
            <div className="mb-8">
                <h1 className="text-3xl md:text-4xl font-light mb-2">
                    <span className="text-primary">Support</span>
                </h1>
                <p className="text-gray-400">Get help and explore resources</p>
            </div>

            {/* Quick Resources */}
            <div className="grid md:grid-cols-2 gap-4 mb-12">
                {resources.map((resource, index) => (
                    <div
                        key={index}
                        className="bg-secondary/30 border border-white/10 rounded-xl p-6 hover:border-primary/30 transition-all cursor-pointer"
                    >
                        <resource.icon className={`w-10 h-10 ${resource.color} mb-4`} />
                        <h3 className="text-lg font-light mb-2">{resource.title}</h3>
                        <p className="text-sm text-gray-400">{resource.description}</p>
                    </div>
                ))}
            </div>

            {/* FAQ Section */}
            <div className="mb-12">
                <h2 className="text-2xl font-light mb-6">Frequently Asked Questions</h2>

                {/* Search */}
                <div className="relative mb-6">
                    <IconSearch className="absolute left-4 top-1/2 -translate-y-1/2 w-5 h-5 text-gray-400" />
                    <input
                        type="text"
                        value={searchQuery}
                        onChange={(e) => setSearchQuery(e.target.value)}
                        placeholder="Search FAQs..."
                        className="w-full pl-12 pr-4 py-3 bg-secondary/30 border border-white/10 rounded-lg text-white placeholder-gray-500 focus:border-primary focus:outline-none transition-colors"
                    />
                </div>

                {/* FAQ List */}
                <div className="space-y-3">
                    {filteredFaqs.map((faq, index) => (
                        <div
                            key={index}
                            className="bg-secondary/30 border border-white/10 rounded-lg overflow-hidden"
                        >
                            <button
                                onClick={() => setExpandedFaq(expandedFaq === index ? null : index)}
                                className="w-full flex items-center justify-between p-5 text-left hover:bg-white/5 transition-colors"
                            >
                                <span className="text-white font-light">{faq.question}</span>
                                {expandedFaq === index ? (
                                    <IconChevronUp className="w-5 h-5 text-primary flex-shrink-0" />
                                ) : (
                                    <IconChevronDown className="w-5 h-5 text-gray-400 flex-shrink-0" />
                                )}
                            </button>

                            {expandedFaq === index && (
                                <div className="px-5 pb-5">
                                    <div className="pt-3 border-t border-white/10">
                                        <p className="text-gray-300 text-sm leading-relaxed">{faq.answer}</p>
                                    </div>
                                </div>
                            )}
                        </div>
                    ))}

                    {filteredFaqs.length === 0 && (
                        <div className="text-center py-8 text-gray-400">
                            No results found. Try a different search term.
                        </div>
                    )}
                </div>
            </div>

            {/* Contact Support */}
            <div className="bg-gradient-to-br from-primary/20 to-primary/5 border border-primary/30 rounded-xl p-8">
                <h2 className="text-2xl font-light mb-6 flex items-center gap-2">
                    <IconMail className="w-6 h-6 text-primary" />
                    Contact Support
                </h2>

                <p className="text-gray-300 mb-6">
                    Can&apos;t find what you&apos;re looking for? Send us a message and we&apos;ll get back to you within 24 hours.
                </p>

                <form className="space-y-4">
                    <div className="grid md:grid-cols-2 gap-4">
                        <div>
                            <Label htmlFor="support-name" className="text-gray-300">Name</Label>
                            <Input id="support-name" placeholder="Your name" className="mt-2" />
                        </div>
                        <div>
                            <Label htmlFor="support-email" className="text-gray-300">Email</Label>
                            <Input id="support-email" type="email" placeholder="your.email@example.com" className="mt-2" />
                        </div>
                    </div>

                    <div>
                        <Label htmlFor="support-subject" className="text-gray-300">Subject</Label>
                        <Input id="support-subject" placeholder="How can we help?" className="mt-2" />
                    </div>

                    <div>
                        <Label htmlFor="support-message" className="text-gray-300">Message</Label>
                        <textarea
                            id="support-message"
                            rows={5}
                            placeholder="Describe your question or issue..."
                            className="w-full mt-2 bg-black/50 border border-white/10 rounded-lg px-4 py-3 text-white placeholder-gray-500 focus:border-primary focus:outline-none transition-colors resize-none"
                        />
                    </div>

                    <button
                        type="submit"
                        className="bg-primary text-black px-8 py-3 rounded-lg font-medium hover:bg-primary/90 transition-all"
                    >
                        Send Message
                    </button>
                </form>

                {/* Contact Info */}
                <div className="mt-8 pt-8 border-t border-white/10 grid md:grid-cols-2 gap-6">
                    <div>
                        <h4 className="text-sm font-light text-gray-400 mb-2">Email</h4>
                        <a href="mailto:support@becomingdiamond.com" className="text-white hover:text-primary transition-colors">
                            support@becomingdiamond.com
                        </a>
                    </div>
                    <div>
                        <h4 className="text-sm font-light text-gray-400 mb-2">Support Hours</h4>
                        <p className="text-white">Monday - Friday, 9:00 AM - 5:00 PM PST</p>
                    </div>
                </div>
            </div>
        </div>
    );
}

export default function SupportPage() {
    return (
        <FeatureGuard>
            <SupportPageContent />
        </FeatureGuard>
    );
}
</file>

<file path="app/layout.tsx">
"use client";
import React, { useState } from "react";
import Link from "next/link";
import { usePathname } from "next/navigation";
import { useSession } from "next-auth/react";
import { cn } from "@/lib/utils";
import {
    IconHome,
    IconBooks,
    IconBrain,
    IconUser,
    IconSettings,
    IconHelp,
    IconMenu2,
    IconX,
    IconSparkles,
    IconRocket
} from "@tabler/icons-react";
import { SignOutButton } from "@/components/auth/SignOutButton";
import { UserAvatar } from "@/components/auth/UserAvatar";
import { FEATURES } from "@/config/features";

export default function AppLayout({ children }: { children: React.ReactNode }) {
    const pathname = usePathname();
    const [isSidebarOpen, setIsSidebarOpen] = useState(false);
    const { data: session } = useSession();

    // Define all possible navigation items
    const allNavItems = [
        { name: "Dashboard", href: "/app", icon: IconHome, feature: 'dashboard' as const },
        { name: "30 Day Sprint", href: "/app/sprint", icon: IconRocket, feature: null },
        { name: "Courses", href: "/app/courses", icon: IconBooks, feature: 'courses' as const },
        { name: "DiamondMindAI", href: "/app/chat", icon: IconBrain, feature: 'diamondMindAI' as const },
        { name: "Profile", href: "/app/profile", icon: IconUser, feature: null },
        { name: "Settings", href: "/app/settings", icon: IconSettings, feature: 'settings' as const },
        { name: "Support", href: "/app/support", icon: IconHelp, feature: 'support' as const },
    ];

    // Filter navigation items based on feature flags
    const navItems = allNavItems.filter(item => {
        // If no feature flag is set, always show the item
        if (item.feature === null) return true;
        // Otherwise, check if the feature is enabled
        return FEATURES[item.feature];
    });

    const isActive = (href: string) => {
        if (href === "/app") {
            return pathname === "/app";
        }
        return pathname.startsWith(href);
    };

    return (
        <div className="min-h-screen bg-black text-white flex">
            {/* Desktop Sidebar */}
            <aside className="hidden lg:flex lg:flex-col w-72 bg-gradient-to-b from-secondary/50 to-black border-r border-white/10 fixed h-full z-40">
                {/* Logo */}
                <div className="p-6 border-b border-white/10">
                    <Link href="/app" className="flex items-center gap-3">
                        <div className="relative">
                            <div className="w-10 h-10 bg-gradient-to-br from-primary/40 to-primary/10 rounded-lg flex items-center justify-center">
                                <IconSparkles className="w-6 h-6 text-primary" />
                            </div>
                            <div className="absolute inset-0 bg-primary/20 rounded-lg blur-md"></div>
                        </div>
                        <div>
                            <h1 className="text-lg font-light tracking-wide">
                                BECOMING <span className="text-primary font-normal">DIAMOND</span>
                            </h1>
                            <p className="text-xs text-gray-500">Member Portal</p>
                        </div>
                    </Link>
                </div>

                {/* Navigation */}
                <nav className="flex-1 p-4 space-y-1">
                    {navItems.map((item) => {
                        const Icon = item.icon;
                        const active = isActive(item.href);

                        return (
                            <Link key={item.href} href={item.href}>
                                <div
                                    className={cn(
                                        "flex items-center gap-3 px-4 py-3 rounded-lg transition-all relative group",
                                        active
                                            ? "bg-primary/10 text-primary"
                                            : "text-gray-400 hover:text-white hover:bg-white/5"
                                    )}
                                >
                                    {active && (
                                        <div className="absolute left-0 w-1 h-8 bg-primary rounded-r-full" />
                                    )}
                                    <Icon className="w-5 h-5 flex-shrink-0" />
                                    <span className="font-light">{item.name}</span>
                                </div>
                            </Link>
                        );
                    })}
                </nav>

                {/* User Section & Logout */}
                <div className="p-4 border-t border-white/10 space-y-3">
                    {/* User Info */}
                    {session?.user && (
                        <div className="flex items-center gap-3 px-4 py-3 rounded-lg bg-white/5">
                            <UserAvatar size={40} />
                            <div className="flex-1 min-w-0">
                                <p className="text-sm font-medium text-white truncate">
                                    {session.user.name || "Member"}
                                </p>
                                <p className="text-xs text-gray-500 truncate">
                                    {session.user.email}
                                </p>
                            </div>
                        </div>
                    )}

                    {/* Logout Button */}
                    <SignOutButton className="w-full justify-start text-red-400 hover:bg-red-400/10" />
                </div>
            </aside>

            {/* Mobile Header */}
            <div className="lg:hidden fixed top-0 left-0 right-0 z-50 bg-black/80 backdrop-blur-sm border-b border-white/10">
                <div className="flex items-center justify-between p-4">
                    <Link href="/app" className="flex items-center gap-2">
                        <div className="w-8 h-8 bg-gradient-to-br from-primary/40 to-primary/10 rounded-lg flex items-center justify-center">
                            <IconSparkles className="w-5 h-5 text-primary" />
                        </div>
                        <span className="text-sm font-light">
                            BECOMING <span className="text-primary">DIAMOND</span>
                        </span>
                    </Link>

                    <button
                        onClick={() => setIsSidebarOpen(!isSidebarOpen)}
                        className="p-2 rounded-lg hover:bg-white/10 transition-colors"
                    >
                        {isSidebarOpen ? (
                            <IconX className="w-6 h-6" />
                        ) : (
                            <IconMenu2 className="w-6 h-6" />
                        )}
                    </button>
                </div>
            </div>

            {/* Mobile Sidebar */}
            {isSidebarOpen && (
                <>
                    {/* Backdrop */}
                    <div
                        onClick={() => setIsSidebarOpen(false)}
                        className="lg:hidden fixed inset-0 bg-black/80 backdrop-blur-sm z-40"
                    />

                    {/* Sidebar */}
                    <aside className="lg:hidden fixed left-0 top-0 bottom-0 w-72 bg-gradient-to-b from-secondary/50 to-black border-r border-white/10 z-50 overflow-y-auto">
                        {/* Logo */}
                        <div className="p-6 border-b border-white/10">
                            <Link href="/app" className="flex items-center gap-3" onClick={() => setIsSidebarOpen(false)}>
                                <div className="relative">
                                    <div className="w-10 h-10 bg-gradient-to-br from-primary/40 to-primary/10 rounded-lg flex items-center justify-center">
                                        <IconSparkles className="w-6 h-6 text-primary" />
                                    </div>
                                    <div className="absolute inset-0 bg-primary/20 rounded-lg blur-md"></div>
                                </div>
                                <div>
                                    <h1 className="text-lg font-light tracking-wide">
                                        BECOMING <span className="text-primary font-normal">DIAMOND</span>
                                    </h1>
                                    <p className="text-xs text-gray-500">Member Portal</p>
                                </div>
                            </Link>
                        </div>

                        {/* Navigation */}
                        <nav className="flex-1 p-4 space-y-1">
                            {navItems.map((item) => {
                                const Icon = item.icon;
                                const active = isActive(item.href);

                                return (
                                    <Link key={item.href} href={item.href} onClick={() => setIsSidebarOpen(false)}>
                                        <div
                                            className={cn(
                                                "flex items-center gap-3 px-4 py-3 rounded-lg transition-all relative",
                                                active
                                                    ? "bg-primary/10 text-primary"
                                                    : "text-gray-400 hover:text-white hover:bg-white/5"
                                            )}
                                        >
                                            {active && (
                                                <div className="absolute left-0 w-1 h-8 bg-primary rounded-r-full" />
                                            )}
                                            <Icon className="w-5 h-5 flex-shrink-0" />
                                            <span className="font-light">{item.name}</span>
                                        </div>
                                    </Link>
                                );
                            })}
                        </nav>

                        {/* User Section & Logout */}
                        <div className="p-4 border-t border-white/10 space-y-3">
                            {/* User Info */}
                            {session?.user && (
                                <div className="flex items-center gap-3 px-4 py-3 rounded-lg bg-white/5">
                                    <UserAvatar size={40} />
                                    <div className="flex-1 min-w-0">
                                        <p className="text-sm font-medium text-white truncate">
                                            {session.user.name || "Member"}
                                        </p>
                                        <p className="text-xs text-gray-500 truncate">
                                            {session.user.email}
                                        </p>
                                    </div>
                                </div>
                            )}

                            {/* Logout Button */}
                            <SignOutButton className="w-full justify-start text-red-400 hover:bg-red-400/10" />
                        </div>
                    </aside>
                </>
            )
            }

            {/* Main Content */}
            <main className="flex-1 lg:ml-72">
                {/* Mobile top spacing */}
                <div className="lg:hidden h-16"></div>

                <div className="min-h-screen">
                    <div className="p-6 lg:p-8">
                        {children}
                    </div>
                </div>
            </main>
        </div>
    );
}
</file>

<file path="app/page.tsx">
"use client";
import React, { useEffect, useState, Suspense } from "react";
import { useRouter, useSearchParams } from "next/navigation";
import { motion } from "framer-motion";
import { BentoGrid, BentoGridItem } from "@/components/ui/bento-grid";
import { IconTrendingUp, IconFlame, IconTarget, IconCalendar, IconUsers, IconBook, IconSparkles, IconBolt, IconChevronRight, IconDiamond, IconCheck } from "@tabler/icons-react";
import { useUser } from "@/contexts/UserContext";
import { useCourses, SAMPLE_COURSES } from "@/contexts/CourseContext";
import { FEATURES } from "@/config/features";
import { FeatureGuard } from "@/components/FeatureGuard";

function AppDashboardContent() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const { user, isLoading } = useUser();
  const { enrollments, getRecentActivities } = useCourses();
  const [showSuccessMessage, setShowSuccessMessage] = useState(false);

  // Check for success parameter from Stripe redirect
  useEffect(() => {
    const success = searchParams.get('success');
    if (success === 'true') {
      console.log('[Dashboard] Payment success detected, user:', user ? 'logged in' : 'not logged in');
      console.log('[Dashboard] Auth loading state:', isLoading);
      setShowSuccessMessage(true);
      // Clear the success parameter from URL after 5 seconds
      setTimeout(() => {
        setShowSuccessMessage(false);
        router.replace('/app', { scroll: false });
      }, 5000);
    }
  }, [searchParams, router, user, isLoading]);

  // Calculate days in program
  const daysInProgram = user ? Math.floor(
    (Date.now() - new Date(user.joinedDate).getTime()) / (1000 * 60 * 60 * 24)
  ) : 0;

  // Calculate completed sessions from enrollments
  const completedLessons = enrollments.reduce((total, enrollment) => {
    return total + enrollment.lessonsCompleted.length;
  }, 0);

  const totalLessons = SAMPLE_COURSES.slice(0, user?.currentPR || 1).reduce((total, course) => {
    return total + course.lessons.length;
  }, 0);

  // User progress data
  const userStats = {
    currentPR: user?.currentPR || 1,
    daysInProgram,
    currentStreak: user?.streak || 0,
    completedSessions: completedLessons,
    totalSessions: totalLessons || 4,
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-[60vh]">
        <div className="text-gray-400">Loading dashboard...</div>
      </div>
    );
  }

  if (!user) {
    return (
      <div className="flex items-center justify-center min-h-[60vh]">
        <div className="text-gray-400">Please log in to view your dashboard.</div>
      </div>
    );
  }

  const prNames = ["Stabilize", "Shift", "Strengthen", "Shine", "Synthesize"];
  const prRooms = prNames.map((name, index) => {
    const prNumber = index + 1;
    const isCompleted = user.completedPRs.includes(prNumber);
    const isInProgress = prNumber === user.currentPR;

    return {
      name,
      completed: isCompleted,
      inProgress: isInProgress,
      color: `from-primary/${30 + index * 10} to-primary/${10 + index * 5}`,
    };
  });

  const upcomingSessions = [
    { title: `PR${user.currentPR}: ${prNames[user.currentPR - 1]}`, date: "Oct 5, 2025", time: "10:00 AM PST", type: "Live Session" },
    { title: "Integration Lab", date: "Oct 8, 2025", time: "2:00 PM PST", type: "Group Coaching" },
    { title: "Swiss Army Knife Workshop", date: "Oct 12, 2025", time: "11:00 AM PST", type: "Workshop" },
  ];

  // Get recent activities from CourseContext
  const recentActivitiesData = getRecentActivities(4);
  const recentActivity = recentActivitiesData.length > 0
    ? recentActivitiesData.map(activity => {
        const timeAgo = getTimeAgo(new Date(activity.timestamp));
        return {
          action: activity.description,
          time: timeAgo,
        };
      })
    : [
        { action: "Welcome to Becoming Diamond!", time: "Just now" },
        { action: "Profile created", time: "Just now" },
      ];

  // Helper function to calculate time ago
  function getTimeAgo(date: Date): string {
    const seconds = Math.floor((Date.now() - date.getTime()) / 1000);

    if (seconds < 60) return "Just now";
    if (seconds < 3600) return `${Math.floor(seconds / 60)} minutes ago`;
    if (seconds < 86400) return `${Math.floor(seconds / 3600)} hours ago`;
    return `${Math.floor(seconds / 86400)} days ago`;
  }

  // Find current course for quick action
  const currentCourse = SAMPLE_COURSES.find(c => c.pressureRoom === user.currentPR);
  const currentEnrollment = currentCourse ? enrollments.find(e => e.courseId === currentCourse.id) : null;

  return (
    <div className="min-h-full relative">
      {/* Success Message */}
      {showSuccessMessage && (
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          exit={{ opacity: 0, y: -20 }}
          className="mb-6 bg-gradient-to-r from-green-500/20 to-emerald-500/20 border border-green-500/50 rounded-xl p-4 flex items-center gap-3"
        >
          <div className="flex-shrink-0 w-10 h-10 rounded-full bg-green-500/20 flex items-center justify-center">
            <IconCheck className="w-6 h-6 text-green-400" />
          </div>
          <div className="flex-1">
            <h3 className="text-white font-medium mb-1">Payment Successful!</h3>
            <p className="text-sm text-gray-300">
              Thank you for your purchase. Your book will be delivered to your email shortly.
            </p>
          </div>
          <button
            onClick={() => setShowSuccessMessage(false)}
            className="flex-shrink-0 text-gray-400 hover:text-white transition-colors"
          >
            <svg className="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </motion.div>
      )}

      {/* Welcome Section */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6 }}
        className="mb-8"
      >
        <div className="flex items-center justify-between mb-2">
          <h1 className="text-3xl md:text-4xl font-light">
            Welcome Back, <span className="text-primary">{user.name.split(' ')[0]}</span>
          </h1>
          <motion.div
            animate={{
              boxShadow: [
                "0 0 20px rgba(79,195,247,0.3)",
                "0 0 40px rgba(79,195,247,0.5)",
                "0 0 20px rgba(79,195,247,0.3)",
              ]
            }}
            transition={{ duration: 2, repeat: Infinity }}
            className="w-12 h-12 rounded-full bg-gradient-to-br from-primary/40 to-primary/10 flex items-center justify-center"
          >
            <IconDiamond className="w-6 h-6 text-primary" />
          </motion.div>
        </div>
        <p className="text-gray-400">Day {userStats.daysInProgram} of your transformation journey</p>
      </motion.div>

      {/* Pressure Room Progress */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6, delay: 0.1 }}
        className="mb-8"
      >
        <h2 className="text-xl mb-4 flex items-center gap-2">
          <IconTarget className="w-5 h-5 text-primary" />
          Your Pressure Room Journey
        </h2>
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-5 gap-3">
          {prRooms.map((pr, index) => (
            <motion.div
              key={index}
              initial={{ opacity: 0, scale: 0.9 }}
              animate={{ opacity: 1, scale: 1 }}
              transition={{ duration: 0.4, delay: index * 0.1 }}
              className={`relative group cursor-pointer bg-gradient-to-b ${pr.color} rounded-xl p-4 border transition-all ${
                pr.inProgress
                  ? "border-primary shadow-lg shadow-primary/30"
                  : pr.completed
                  ? "border-primary/40"
                  : "border-white/10"
              }`}
            >
              <div className="text-center">
                <div className="text-2xl font-light mb-2 text-primary" style={{
                  filter: `drop-shadow(0 0 ${8 + index * 2}px rgba(79,195,247,${0.3 + index * 0.1}))`
                }}>
                  PR{['I', 'II', 'III', 'IV', 'V'][index]}
                </div>
                <div className="text-sm mb-2">{pr.name}</div>
                {pr.completed && (
                  <div className="text-xs text-primary">Completed</div>
                )}
                {pr.inProgress && (
                  <motion.div
                    animate={{ opacity: [0.5, 1, 0.5] }}
                    transition={{ duration: 2, repeat: Infinity }}
                    className="text-xs text-primary font-semibold"
                  >
                    In Progress
                  </motion.div>
                )}
              </div>
            </motion.div>
          ))}
        </div>
      </motion.div>

      {/* Stats Cards */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6, delay: 0.2 }}
        className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-8"
      >
        <div className="bg-gradient-to-br from-primary/20 to-primary/5 border border-primary/30 rounded-xl p-4">
          <div className="flex items-center gap-2 mb-2">
            <IconFlame className="w-5 h-5 text-orange-400" />
            <span className="text-sm text-gray-400">Current Streak</span>
          </div>
          <div className="text-3xl font-light text-primary">{userStats.currentStreak}</div>
          <div className="text-xs text-gray-500 mt-1">days</div>
        </div>

        <div className="bg-secondary/50 border border-white/10 rounded-xl p-4">
          <div className="flex items-center gap-2 mb-2">
            <IconTrendingUp className="w-5 h-5 text-green-400" />
            <span className="text-sm text-gray-400">Sessions</span>
          </div>
          <div className="text-3xl font-light">{userStats.completedSessions}/{userStats.totalSessions}</div>
          <div className="text-xs text-gray-500 mt-1">completed</div>
        </div>

        <div className="bg-secondary/50 border border-white/10 rounded-xl p-4">
          <div className="flex items-center gap-2 mb-2">
            <IconCalendar className="w-5 h-5 text-blue-400" />
            <span className="text-sm text-gray-400">Days Active</span>
          </div>
          <div className="text-3xl font-light">{userStats.daysInProgram}</div>
          <div className="text-xs text-gray-500 mt-1">total days</div>
        </div>

        <div className="bg-secondary/50 border border-white/10 rounded-xl p-4">
          <div className="flex items-center gap-2 mb-2">
            <IconDiamond className="w-5 h-5 text-primary" />
            <span className="text-sm text-gray-400">Pressure Room</span>
          </div>
          <div className="text-3xl font-light">{userStats.currentPR}/5</div>
          <div className="text-xs text-gray-500 mt-1">current</div>
        </div>
      </motion.div>

      {/* Main Bento Grid */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6, delay: 0.3 }}
      >
        <BentoGrid className="mb-8">
          {/* Diamond Sprint Tracker */}
          <BentoGridItem
            title="Diamond Sprint Tracker"
            description="Track your daily practices and build unshakable habits"
            header={
              <div className="flex h-full min-h-[8rem] w-full flex-1 rounded-xl bg-gradient-to-br from-primary/20 to-primary/5 p-4">
                <div className="flex flex-col justify-between w-full">
                  <div className="flex items-center gap-2 mb-3">
                    <IconSparkles className="w-5 h-5 text-primary" />
                    <span className="text-sm text-gray-300">30-Day Practice</span>
                  </div>
                  <div className="grid grid-cols-7 gap-1">
                    {Array.from({ length: 21 }).map((_, i) => (
                      <div
                        key={i}
                        className={`aspect-square rounded ${
                          i < 12 ? "bg-primary" : i < 19 ? "bg-primary/30" : "bg-white/10"
                        }`}
                        style={{
                          boxShadow: i < 12 ? "0 0 8px rgba(79,195,247,0.5)" : "none",
                        }}
                      />
                    ))}
                  </div>
                  <div className="text-xs text-gray-400 mt-2">12 days completed this sprint</div>
                </div>
              </div>
            }
            className="md:col-span-2"
          />

          {/* Upcoming Sessions */}
          <BentoGridItem
            title="Upcoming Sessions"
            description="Your scheduled live sessions and workshops"
            header={
              <div className="flex h-full min-h-[8rem] w-full flex-1 rounded-xl bg-gradient-to-br from-secondary/50 to-black p-4">
                <div className="space-y-2 w-full">
                  {upcomingSessions.slice(0, 2).map((session, i) => (
                    <div key={i} className="bg-white/5 rounded-lg p-2 border border-white/10">
                      <div className="text-xs text-primary mb-1">{session.type}</div>
                      <div className="text-sm font-light">{session.title}</div>
                      <div className="text-xs text-gray-500 mt-1">{session.date} at {session.time}</div>
                    </div>
                  ))}
                </div>
              </div>
            }
            className="md:col-span-1"
          />

          {/* Swiss Army Knife Tools */}
          <BentoGridItem
            title="Swiss Army Knife"
            description="Real-time emotional regulation tools"
            header={
              <div className="flex h-full min-h-[8rem] w-full flex-1 items-center justify-center rounded-xl bg-gradient-to-br from-blue-500/20 to-purple-500/20 relative overflow-hidden">
                <motion.div
                  animate={{
                    scale: [1, 1.2, 1],
                    opacity: [0.3, 0.6, 0.3],
                  }}
                  transition={{ duration: 3, repeat: Infinity }}
                  className="absolute w-32 h-32 bg-primary/30 rounded-full blur-3xl"
                />
                <div className="relative z-10 text-center">
                  <IconBolt className="w-12 h-12 text-primary mx-auto mb-2" />
                  <div className="text-sm text-gray-300">3 Active Tools</div>
                </div>
              </div>
            }
          />

          {/* Community Activity */}
          <BentoGridItem
            title="DiamondMind Immersion"
            description="Connect with your transformation community"
            header={
              <div className="flex h-full min-h-[8rem] w-full flex-1 rounded-xl bg-gradient-to-br from-green-500/20 to-emerald-500/20 p-4">
                <div className="flex flex-col justify-between w-full">
                  <div className="flex items-center gap-2 mb-3">
                    <IconUsers className="w-5 h-5 text-green-400" />
                    <span className="text-sm text-gray-300">1,247 Active Members</span>
                  </div>
                  <div className="space-y-2">
                    <div className="text-xs text-gray-400">Recent: &quot;PR3: Strengthen Integration Lab&quot;</div>
                    <div className="text-xs text-gray-400">34 members online now</div>
                  </div>
                </div>
              </div>
            }
          />

          {/* Course Library */}
          <BentoGridItem
            title="Course Library"
            description="Access your Pressure Room content and resources"
            header={
              <div className="flex h-full min-h-[8rem] w-full flex-1 items-center justify-center rounded-xl bg-gradient-to-br from-orange-500/20 to-red-500/20">
                <div className="text-center">
                  <IconBook className="w-12 h-12 text-orange-400 mx-auto mb-2" />
                  <div className="text-sm text-gray-300">23 Modules Available</div>
                  <div className="text-xs text-gray-500 mt-1">8 Completed</div>
                </div>
              </div>
            }
            className="md:col-span-2"
          />
        </BentoGrid>
      </motion.div>

      {/* Recent Activity */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6, delay: 0.4 }}
        className="grid md:grid-cols-2 gap-6"
      >
        <div>
          <h2 className="text-xl mb-4 flex items-center gap-2">
            <IconTrendingUp className="w-5 h-5 text-primary" />
            Recent Activity
          </h2>
          <div className="space-y-2">
            {recentActivity.map((activity, i) => (
              <motion.div
                key={i}
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ duration: 0.4, delay: i * 0.1 }}
                className="bg-secondary/50 border border-white/10 rounded-lg p-4 hover:border-primary/30 transition-all group"
              >
                <div className="flex items-center justify-between">
                  <div>
                    <p className="text-sm text-gray-300 group-hover:text-white transition-colors">
                      {activity.action}
                    </p>
                    <p className="text-xs text-gray-500 mt-1">{activity.time}</p>
                  </div>
                  <IconChevronRight className="w-4 h-4 text-gray-500 group-hover:text-primary transition-colors" />
                </div>
              </motion.div>
            ))}
          </div>
        </div>

        {/* Quick Actions */}
        <div>
          <h2 className="text-xl mb-4 flex items-center gap-2">
            <IconBolt className="w-5 h-5 text-primary" />
            Quick Actions
          </h2>
          <div className="space-y-3">
            {/* Continue PR - Only show if courses feature is enabled */}
            {FEATURES.courses && (
              <motion.button
                whileHover={{ scale: 1.02, boxShadow: "0 0 20px rgba(79,195,247,0.3)" }}
                whileTap={{ scale: 0.98 }}
                onClick={() => router.push('/app/courses')}
                className="w-full bg-gradient-to-r from-primary/30 to-primary/10 border border-primary/50 rounded-lg p-4 text-left hover:border-primary transition-all group"
              >
                <div className="flex items-center justify-between">
                  <div>
                    <div className="text-white font-medium mb-1">
                      {currentEnrollment ? 'Continue' : 'Start'} PR{user.currentPR}
                    </div>
                    <div className="text-xs text-gray-400">
                      {currentCourse?.title.split(': ')[1] || prNames[user.currentPR - 1]}
                      {currentEnrollment && ` - ${currentEnrollment.progress}% complete`}
                    </div>
                  </div>
                  <IconChevronRight className="w-5 h-5 text-primary group-hover:translate-x-1 transition-transform" />
                </div>
              </motion.button>
            )}

            <motion.button
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
              onClick={() => router.push('/app/profile')}
              className="w-full bg-secondary/50 border border-white/10 rounded-lg p-4 text-left hover:border-primary/30 transition-all group"
            >
              <div className="flex items-center justify-between">
                <div>
                  <div className="text-white font-medium mb-1">Update Profile</div>
                  <div className="text-xs text-gray-400">Manage your personal information</div>
                </div>
                <IconChevronRight className="w-5 h-5 text-gray-500 group-hover:text-primary group-hover:translate-x-1 transition-all" />
              </div>
            </motion.button>

            {/* DiamondMindAI - Only show if feature is enabled */}
            {FEATURES.diamondMindAI && (
              <motion.button
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
                onClick={() => router.push('/app/chat')}
                className="w-full bg-secondary/50 border border-white/10 rounded-lg p-4 text-left hover:border-primary/30 transition-all group"
              >
                <div className="flex items-center justify-between">
                  <div>
                    <div className="text-white font-medium mb-1">Chat with DiamondMindAI</div>
                    <div className="text-xs text-gray-400">Get personalized guidance</div>
                  </div>
                  <IconChevronRight className="w-5 h-5 text-gray-500 group-hover:text-primary group-hover:translate-x-1 transition-all" />
                </div>
              </motion.button>
            )}

            <motion.button
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
              onClick={() => router.push('/app/support')}
              className="w-full bg-secondary/50 border border-white/10 rounded-lg p-4 text-left hover:border-primary/30 transition-all group"
            >
              <div className="flex items-center justify-between">
                <div>
                  <div className="text-white font-medium mb-1">Get Support</div>
                  <div className="text-xs text-gray-400">Help and resources</div>
                </div>
                <IconChevronRight className="w-5 h-5 text-gray-500 group-hover:text-primary group-hover:translate-x-1 transition-all" />
              </div>
            </motion.button>
          </div>
        </div>
      </motion.div>
    </div>
  );
}

export default function AppDashboard() {
  return (
    <FeatureGuard>
      <Suspense fallback={
        <div className="flex items-center justify-center min-h-[60vh]">
          <div className="text-gray-400">Loading dashboard...</div>
        </div>
      }>
        <AppDashboardContent />
      </Suspense>
    </FeatureGuard>
  );
}
</file>

<file path="auth/error/page.tsx">
"use client";

import { useSearchParams } from "next/navigation";
import Link from "next/link";
import { motion } from "framer-motion";
import { Spotlight } from "@/components/ui/spotlight";
import { IconAlertCircle } from "@tabler/icons-react";
import { Suspense } from "react";

function ErrorContent() {
  const searchParams = useSearchParams();
  const error = searchParams.get("error");

  const errorMessages: Record<string, { title: string; description: string }> = {
    Configuration: {
      title: "Configuration Error",
      description: "There is a problem with the server configuration. Please contact support.",
    },
    AccessDenied: {
      title: "Access Denied",
      description: "You do not have permission to sign in. Please contact support if you believe this is an error.",
    },
    Verification: {
      title: "Verification Link Expired",
      description: "The verification link has expired. Please request a new one.",
    },
    OAuthSignin: {
      title: "OAuth Sign-In Error",
      description: "Error connecting to the authentication provider. Please try again.",
    },
    OAuthCallback: {
      title: "OAuth Callback Error",
      description: "Authentication failed during the callback. Please try again.",
    },
    OAuthCreateAccount: {
      title: "Cannot Create Account",
      description: "Could not create your account. The email may already be in use with a different provider.",
    },
    EmailCreateAccount: {
      title: "Cannot Create Account",
      description: "Could not create your account with this email. Please try again.",
    },
    Callback: {
      title: "Callback Error",
      description: "Authentication callback failed. Please try again.",
    },
    Default: {
      title: "Authentication Error",
      description: "An error occurred during sign-in. Please try again.",
    },
  };

  const errorInfo = errorMessages[error || "Default"] || errorMessages.Default;

  return (
    <main className="relative bg-black min-h-screen flex items-center justify-center overflow-hidden">
      {/* Background Effects */}
      <Spotlight className="top-0 left-1/4 md:-top-20" fill="#ef4444" />
      <div className="absolute inset-0 bg-gradient-to-b from-black via-red-500/5 to-black pointer-events-none" />
      <div className="absolute inset-0 bg-grid-white/[0.02] pointer-events-none" />

      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
        className="relative z-10 w-full max-w-md px-6"
      >
        <div className="bg-secondary/30 backdrop-blur-sm border border-red-500/30 rounded-2xl p-8">
          {/* Icon */}
          <div className="flex justify-center mb-6">
            <div className="w-16 h-16 bg-red-500/20 rounded-full flex items-center justify-center">
              <IconAlertCircle className="w-8 h-8 text-red-500" />
            </div>
          </div>

          {/* Content */}
          <div className="text-center mb-8">
            <h1 className="text-2xl font-light text-white mb-3">{errorInfo.title}</h1>
            <p className="text-gray-400">{errorInfo.description}</p>
          </div>

          {/* Error Code (if available) */}
          {error && (
            <div className="mb-6 p-3 bg-red-500/10 border border-red-500/20 rounded-lg">
              <p className="text-sm text-red-400 text-center">
                Error Code: <code className="font-mono">{error}</code>
              </p>
            </div>
          )}

          {/* Actions */}
          <div className="space-y-3">
            <Link
              href="/auth/signin"
              className="block w-full bg-primary hover:bg-primary/90 text-black text-center font-medium py-3 px-6 rounded-lg transition-all"
            >
              Try Again
            </Link>

            <Link
              href="/"
              className="block w-full bg-white/5 hover:bg-white/10 border border-white/10 text-white text-center font-medium py-3 px-6 rounded-lg transition-all"
            >
              Go to Home
            </Link>
          </div>

          {/* Support Link */}
          <div className="mt-6 text-center">
            <p className="text-sm text-gray-500">
              Need help?{" "}
              <a href="mailto:support@becomingdiamond.com" className="text-primary hover:underline">
                Contact Support
              </a>
            </p>
          </div>
        </div>
      </motion.div>
    </main>
  );
}

export default function ErrorPage() {
  return (
    <Suspense fallback={
      <div className="flex items-center justify-center min-h-screen bg-black">
        <div className="text-gray-400">Loading...</div>
      </div>
    }>
      <ErrorContent />
    </Suspense>
  );
}
</file>

<file path="auth/signin/page.tsx">
"use client";

import { signIn } from "next-auth/react";
import { useState } from "react";
import { useRouter } from "next/navigation";
import Link from "next/link";
import { motion } from "framer-motion";
import { Spotlight } from "@/components/ui/spotlight";
import { IconBrandGoogle, IconBrandGithub, IconMail, IconFlask } from "@tabler/icons-react";
import { useUser } from "@/contexts/UserContext";
import { AUTH_CONFIG } from "@/config/features";

export default function SignInPage() {
  const [email, setEmail] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [emailSent, setEmailSent] = useState(false);
  const router = useRouter();
  const { login } = useUser();

  const handleEmailSignIn = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);

    try {
      const result = await signIn("resend", {
        email,
        redirect: false,
        callbackUrl: AUTH_CONFIG.successRedirectUri,
      });

      if (result?.ok) {
        setEmailSent(true);
      }
    } catch (error) {
      console.error("Sign-in error:", error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleOAuthSignIn = (provider: "google" | "github") => {
    signIn(provider, { callbackUrl: AUTH_CONFIG.successRedirectUri });
  };

  const handleTestLogin = () => {
    login("test-user-" + Date.now(), "test");
    router.push(AUTH_CONFIG.successRedirectUri);
  };

  if (emailSent) {
    return (
      <main className="relative bg-black min-h-screen flex items-center justify-center overflow-hidden">
        <Spotlight className="top-0 left-1/4 md:-top-20" fill="#4fc3f7" />

        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="relative z-10 w-full max-w-md px-6"
        >
          <div className="bg-secondary/30 backdrop-blur-sm border border-primary/30 rounded-2xl p-8 text-center">
            <div className="flex justify-center mb-4">
              <div className="w-16 h-16 bg-primary/20 rounded-full flex items-center justify-center">
                <IconMail className="w-8 h-8 text-primary" />
              </div>
            </div>

            <h2 className="text-2xl font-light text-white mb-2">
              Check Your Email
            </h2>

            <p className="text-gray-400 mb-6">
              We sent a magic link to <strong className="text-white">{email}</strong>
            </p>

            <p className="text-sm text-gray-500">
              Click the link in the email to sign in to your account.
              The link expires in 24 hours.
            </p>
          </div>
        </motion.div>
      </main>
    );
  }

  return (
    <main className="relative bg-black min-h-screen flex items-center justify-center overflow-hidden">
      {/* Background Effects */}
      <Spotlight className="top-0 left-1/4 md:-top-20" fill="#4fc3f7" />
      <div className="absolute inset-0 bg-gradient-to-b from-black via-primary/5 to-black pointer-events-none" />
      <div className="absolute inset-0 bg-grid-white/[0.02] pointer-events-none" />

      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
        className="relative z-10 w-full max-w-md px-6"
      >
        <div className="bg-secondary/30 backdrop-blur-sm border border-primary/30 rounded-2xl p-8">
          {/* Header */}
          <div className="text-center mb-8">
            <h1 className="text-3xl font-light text-white mb-2">
              Welcome to <span className="text-primary">Becoming Diamond</span>
            </h1>
            <p className="text-gray-400">Sign in to access your member portal</p>
          </div>

          {/* Email Sign-In Form */}
          <form onSubmit={handleEmailSignIn} className="mb-6">
            <label htmlFor="email" className="block text-sm text-gray-300 mb-2">
              Email Address
            </label>
            <input
              id="email"
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              placeholder="you@example.com"
              required
              disabled={isLoading}
              className="w-full px-4 py-3 bg-secondary/50 border border-white/10 rounded-lg text-white placeholder-gray-500 focus:outline-none focus:border-primary/50 transition-colors disabled:opacity-50"
            />

            <button
              type="submit"
              disabled={isLoading || !email}
              className="w-full mt-4 bg-primary hover:bg-primary/90 text-black font-medium py-3 px-6 rounded-lg transition-all disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2"
            >
              {isLoading ? (
                <>
                  <svg className="animate-spin h-5 w-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  Sending magic link...
                </>
              ) : (
                <>
                  <IconMail className="w-5 h-5" />
                  Continue with Email
                </>
              )}
            </button>
          </form>

          {/* Divider */}
          <div className="relative flex items-center justify-center my-6">
            <div className="absolute inset-0 flex items-center">
              <div className="w-full border-t border-white/10"></div>
            </div>
            <div className="relative bg-secondary px-4 text-sm text-gray-500">
              Or continue with
            </div>
          </div>

          {/* OAuth Buttons */}
          <div className="space-y-3">
            <button
              onClick={() => handleOAuthSignIn("google")}
              className="w-full bg-white/5 hover:bg-white/10 border border-white/10 text-white font-medium py-3 px-6 rounded-lg transition-all flex items-center justify-center gap-2"
            >
              <IconBrandGoogle className="w-5 h-5" />
              Sign in with Google
            </button>

            <button
              onClick={() => handleOAuthSignIn("github")}
              className="w-full bg-white/5 hover:bg-white/10 border border-white/10 text-white font-medium py-3 px-6 rounded-lg transition-all flex items-center justify-center gap-2"
            >
              <IconBrandGithub className="w-5 h-5" />
              Sign in with GitHub
            </button>
          </div>

          {/* Test Login (Development) */}
          {process.env.NODE_ENV === "development" && (
            <>
              <div className="relative flex items-center justify-center my-6">
                <div className="absolute inset-0 flex items-center">
                  <div className="w-full border-t border-yellow-500/20"></div>
                </div>
                <div className="relative bg-secondary px-4 text-xs text-yellow-500/60">
                  Development Only
                </div>
              </div>

              <button
                onClick={handleTestLogin}
                className="w-full bg-yellow-500/10 hover:bg-yellow-500/20 border border-yellow-500/30 text-yellow-500 font-medium py-3 px-6 rounded-lg transition-all flex items-center justify-center gap-2"
              >
                <IconFlask className="w-5 h-5" />
                Test Login (Bypass Auth)
              </button>
            </>
          )}

          {/* Footer */}
          <div className="mt-6 text-center">
            <p className="text-sm text-gray-500">
              New to Becoming Diamond?{" "}
              <Link href="/#book" className="text-primary hover:underline">
                Purchase Access
              </Link>
            </p>
          </div>
        </div>
      </motion.div>
    </main>
  );
}
</file>

<file path="auth/verify-request/page.tsx">
"use client";

import { motion } from "framer-motion";
import { Spotlight } from "@/components/ui/spotlight";
import { IconMail, IconCheck } from "@tabler/icons-react";
import Link from "next/link";

export default function VerifyRequestPage() {
  return (
    <main className="relative bg-black min-h-screen flex items-center justify-center overflow-hidden">
      {/* Background Effects */}
      <Spotlight className="top-0 left-1/4 md:-top-20" fill="#4fc3f7" />
      <div className="absolute inset-0 bg-gradient-to-b from-black via-primary/5 to-black pointer-events-none" />
      <div className="absolute inset-0 bg-grid-white/[0.02] pointer-events-none" />

      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
        className="relative z-10 w-full max-w-md px-6"
      >
        <div className="bg-secondary/30 backdrop-blur-sm border border-primary/30 rounded-2xl p-8">
          {/* Icon with Animation */}
          <div className="flex justify-center mb-6">
            <motion.div
              initial={{ scale: 0.8, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              transition={{ delay: 0.2, duration: 0.5 }}
              className="w-16 h-16 bg-primary/20 rounded-full flex items-center justify-center relative"
            >
              <IconMail className="w-8 h-8 text-primary" />
              <motion.div
                initial={{ scale: 0, opacity: 0 }}
                animate={{ scale: 1, opacity: 1 }}
                transition={{ delay: 0.5, duration: 0.3 }}
                className="absolute -top-1 -right-1 w-6 h-6 bg-green-500 rounded-full flex items-center justify-center"
              >
                <IconCheck className="w-4 h-4 text-white" />
              </motion.div>
            </motion.div>
          </div>

          {/* Content */}
          <div className="text-center mb-8">
            <h1 className="text-2xl font-light text-white mb-3">
              Check Your Email
            </h1>
            <p className="text-gray-400 mb-4">
              A sign-in link has been sent to your email address.
            </p>
            <p className="text-sm text-gray-500">
              Click the link in the email to sign in to your account.
              The link will expire in 24 hours.
            </p>
          </div>

          {/* Info Box */}
          <div className="mb-6 p-4 bg-primary/10 border border-primary/20 rounded-lg">
            <div className="flex items-start gap-3">
              <IconMail className="w-5 h-5 text-primary flex-shrink-0 mt-0.5" />
              <div className="text-sm text-gray-300">
                <p className="font-medium text-white mb-1">Didn&apos;t receive the email?</p>
                <ul className="list-disc list-inside space-y-1 text-gray-400">
                  <li>Check your spam folder</li>
                  <li>Make sure you entered the correct email</li>
                  <li>Wait a few minutes and check again</li>
                </ul>
              </div>
            </div>
          </div>

          {/* Actions */}
          <div className="space-y-3">
            <Link
              href="/auth/signin"
              className="block w-full bg-primary hover:bg-primary/90 text-black text-center font-medium py-3 px-6 rounded-lg transition-all"
            >
              Back to Sign In
            </Link>

            <Link
              href="/"
              className="block w-full bg-white/5 hover:bg-white/10 border border-white/10 text-white text-center font-medium py-3 px-6 rounded-lg transition-all"
            >
              Go to Home
            </Link>
          </div>

          {/* Support Link */}
          <div className="mt-6 text-center">
            <p className="text-sm text-gray-500">
              Need help?{" "}
              <a href="mailto:support@becomingdiamond.com" className="text-primary hover:underline">
                Contact Support
              </a>
            </p>
          </div>
        </div>
      </motion.div>
    </main>
  );
}
</file>

<file path="auth/page.tsx">
"use client";
import { useState } from "react";
import Link from "next/link";
import { useRouter } from "next/navigation";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { BackgroundBeams } from "@/components/ui/background-beams";
import { IconBrandGoogle, IconBrandGithub, IconBrandApple, IconDiamond } from "@tabler/icons-react";
import { useUser } from "@/contexts/UserContext";

export default function AuthPage() {
    const router = useRouter();
    const { login } = useUser();
    const [isLogin, setIsLogin] = useState(true);
    const [email, setEmail] = useState("");
    const [password, setPassword] = useState("");
    const [name, setName] = useState("");
    const [loading, setLoading] = useState(false);

    const handleTestLogin = () => {
        setLoading(true);
        // Generate a test user ID
        const userId = `user_${Date.now()}`;
        login(userId, 'test');
        // Simulate a brief loading state
        setTimeout(() => {
            router.push("/app");
        }, 800);
    };

    const handleSubmit = (e: React.FormEvent) => {
        e.preventDefault();
        setLoading(true);
        // Generate user ID from email for demo purposes
        const userId = `user_${email.split('@')[0]}_${Date.now()}`;
        login(userId, 'email');
        setTimeout(() => {
            router.push("/app");
        }, 800);
    };

    const handleSSOLogin = (provider: 'google' | 'github' | 'apple') => {
        setLoading(true);
        // Generate user ID from provider
        const userId = `user_${provider}_${Date.now()}`;
        login(userId, provider === 'github' ? 'github' : 'google');
        // Simulate SSO authentication
        setTimeout(() => {
            router.push("/app");
        }, 800);
    };

    return (
        <div className="min-h-screen bg-black text-white flex items-center justify-center relative overflow-hidden">
            <BackgroundBeams className="opacity-40" />

            {/* Back to Home - Diamond Icon */}
            <Link
                href="/"
                className="absolute top-6 left-6 z-10 group"
            >
                <div className="relative">
                    <div className="w-12 h-12 bg-primary/20 rounded-full flex items-center justify-center backdrop-blur-sm border border-primary/30 group-hover:bg-primary/30 transition-all">
                        <IconDiamond className="w-6 h-6 text-primary" />
                    </div>
                    <div className="absolute inset-0 bg-primary/20 rounded-full blur-lg opacity-0 group-hover:opacity-100 transition-opacity"></div>
                </div>
            </Link>

            <div className="relative z-10 w-full max-w-md px-6">
                {/* Logo and Header */}
                <div className="text-center mb-8">
                    <h1 className="text-4xl font-light mb-3">
                        BECOMING <span className="text-primary">DIAMOND</span>
                    </h1>
                    <p className="text-gray-400">
                        {isLogin ? "Welcome back. Continue your transformation." : "Begin your transformation journey."}
                    </p>
                </div>

                {/* Auth Card */}
                <div className="bg-secondary/50 backdrop-blur-sm border border-white/10 rounded-2xl p-8">
                    {/* Toggle between Login and Signup */}
                    <div className="flex gap-2 mb-6 bg-black/30 rounded-lg p-1">
                        <button
                            onClick={() => setIsLogin(true)}
                            className={`flex-1 py-2 rounded-md text-sm transition-all ${isLogin
                                ? "bg-primary text-black font-medium"
                                : "text-gray-400 hover:text-white"
                                }`}
                        >
                            Login
                        </button>
                        <button
                            onClick={() => setIsLogin(false)}
                            className={`flex-1 py-2 rounded-md text-sm transition-all ${!isLogin
                                ? "bg-primary text-black font-medium"
                                : "text-gray-400 hover:text-white"
                                }`}
                        >
                            Sign Up
                        </button>
                    </div>

                    {/* Form */}
                    <form onSubmit={handleSubmit} className="space-y-5">
                        {!isLogin && (
                            <div>
                                <Label htmlFor="name" className="text-gray-300">Full Name</Label>
                                <Input
                                    id="name"
                                    type="text"
                                    placeholder="Enter your full name"
                                    value={name}
                                    onChange={(e) => setName(e.target.value)}
                                    className="mt-2"
                                    required={!isLogin}
                                />
                            </div>
                        )}

                        <div>
                            <Label htmlFor="email" className="text-gray-300">Email Address</Label>
                            <Input
                                id="email"
                                type="email"
                                placeholder="Enter your email"
                                value={email}
                                onChange={(e) => setEmail(e.target.value)}
                                className="mt-2"
                                required
                            />
                        </div>

                        <div>
                            <Label htmlFor="password" className="text-gray-300">Password</Label>
                            <Input
                                id="password"
                                type="password"
                                placeholder="Enter your password"
                                value={password}
                                onChange={(e) => setPassword(e.target.value)}
                                className="mt-2"
                                required
                            />
                        </div>

                        {isLogin && (
                            <div className="flex justify-end">
                                <button
                                    type="button"
                                    className="text-sm text-primary hover:underline"
                                >
                                    Forgot password?
                                </button>
                            </div>
                        )}

                        <button
                            type="submit"
                            disabled={loading}
                            className="w-full bg-primary text-black py-3 rounded-lg font-medium hover:bg-primary/90 transition-all disabled:opacity-50 disabled:cursor-not-allowed"
                        >
                            {loading ? "Please wait..." : (isLogin ? "Sign In" : "Create Account")}
                        </button>
                    </form>

                    {/* Divider */}
                    <div className="flex items-center my-6">
                        <div className="flex-1 border-t border-white/10"></div>
                        <span className="px-4 text-xs text-gray-500">OR</span>
                        <div className="flex-1 border-t border-white/10"></div>
                    </div>

                    {/* SSO Buttons */}
                    <div className="space-y-3">
                        <button
                            onClick={() => handleSSOLogin("google")}
                            disabled={loading}
                            className="w-full flex items-center justify-center gap-3 bg-white/5 hover:bg-white/10 border border-white/10 text-white py-3 rounded-lg transition-all disabled:opacity-50"
                        >
                            <IconBrandGoogle className="w-5 h-5" />
                            Continue with Google
                        </button>

                        <button
                            onClick={() => handleSSOLogin("github")}
                            disabled={loading}
                            className="w-full flex items-center justify-center gap-3 bg-white/5 hover:bg-white/10 border border-white/10 text-white py-3 rounded-lg transition-all disabled:opacity-50"
                        >
                            <IconBrandGithub className="w-5 h-5" />
                            Continue with GitHub
                        </button>

                        <button
                            onClick={() => handleSSOLogin("apple")}
                            disabled={loading}
                            className="w-full flex items-center justify-center gap-3 bg-white/5 hover:bg-white/10 border border-white/10 text-white py-3 rounded-lg transition-all disabled:opacity-50"
                        >
                            <IconBrandApple className="w-5 h-5" />
                            Continue with Apple
                        </button>
                    </div>

                    {/* Test Login Button */}
                    <div className="mt-6 pt-6 border-t border-white/10">
                        <div className="flex justify-center">
                            <button
                                onClick={handleTestLogin}
                                disabled={loading}
                                className="bg-black text-primary px-6 py-2 text-sm font-medium border border-primary rounded-lg hover:bg-primary/10 transition-all disabled:opacity-50"
                            >
                                Test Login (Skip Auth)
                            </button>
                        </div>
                        <p className="text-xs text-gray-500 text-center mt-2">
                            For development purposes only
                        </p>
                    </div>
                </div>

                {/* Terms */}
                <p className="text-xs text-gray-500 text-center mt-6">
                    By continuing, you agree to our{" "}
                    <a href="#" className="text-primary hover:underline">Terms of Service</a>
                    {" "}and{" "}
                    <a href="#" className="text-primary hover:underline">Privacy Policy</a>
                </p>
            </div>
        </div>
    );
}
</file>

<file path="book/page.tsx">
"use client";
import { Navigation } from "@/components/Navigation";
import { Footer } from "@/components/Footer";
import { BookSalesSection } from "@/components/BookSalesSection";

export default function BookPage() {
  return (
    <main className="relative bg-black antialiased">
      <Navigation />

      {/* Book Sales Section */}
      <BookSalesSection className="pt-20" />

      <Footer />
    </main>
  );
}
</file>

<file path="legal/disclaimer/page.tsx">
import { LegalPage } from "@/components/LegalPage";
import { getContentBySlug } from "@/lib/content";

export const metadata = {
  title: "Disclaimer | Becoming Diamond",
  description: "Legal disclaimer for Becoming Diamond programs and services",
};

export default async function DisclaimerPage() {
  const content = await getContentBySlug("legal", "disclaimer");

  if (!content) {
    return (
      <div className="min-h-screen bg-black flex items-center justify-center">
        <p className="text-white">Content not found</p>
      </div>
    );
  }

  return (
    <LegalPage
      title={content.frontmatter.title as string}
      lastUpdated={content.frontmatter.lastUpdated as string}
      content={content.content}
    />
  );
}
</file>

<file path="legal/privacy/page.tsx">
import { LegalPage } from "@/components/LegalPage";
import { getContentBySlug } from "@/lib/content";

export const metadata = {
  title: "Privacy Policy | Becoming Diamond",
  description: "Privacy policy for Becoming Diamond - how we collect, use, and protect your data",
};

export default async function PrivacyPage() {
  const content = await getContentBySlug("legal", "privacy-policy");

  if (!content) {
    return (
      <div className="min-h-screen bg-black flex items-center justify-center">
        <p className="text-white">Content not found</p>
      </div>
    );
  }

  return (
    <LegalPage
      title={content.frontmatter.title as string}
      lastUpdated={content.frontmatter.lastUpdated as string}
      content={content.content}
    />
  );
}
</file>

<file path="legal/terms/page.tsx">
import { LegalPage } from "@/components/LegalPage";
import { getContentBySlug } from "@/lib/content";

export const metadata = {
  title: "Terms of Service | Becoming Diamond",
  description: "Terms of Service for Becoming Diamond programs and services",
};

export default async function TermsPage() {
  const content = await getContentBySlug("legal", "terms-of-service");

  if (!content) {
    return (
      <div className="min-h-screen bg-black flex items-center justify-center">
        <p className="text-white">Content not found</p>
      </div>
    );
  }

  return (
    <LegalPage
      title={content.frontmatter.title as string}
      lastUpdated={content.frontmatter.lastUpdated as string}
      content={content.content}
    />
  );
}
</file>

<file path="news/[slug]/page.tsx">
import { getContentBySlug, getContentByType } from '@/lib/content';
import { notFound } from 'next/navigation';

export async function generateStaticParams(): Promise<{ slug: string }[]> {
  const news = await getContentByType('news');
  return news.map((item) => ({
    slug: item.slug,
  }));
}

export default async function NewsItemPage({ params }: { params: Promise<{ slug: string }> }) {
  const { slug } = await params;
  const item = await getContentBySlug('news', slug);

  if (!item) {
    notFound();
  }

  return (
    <article className="container mx-auto px-4 py-8 max-w-4xl">
      <h1 className="text-4xl font-bold mb-4">{item.frontmatter.title}</h1>
      
      {item.frontmatter.date && (
        <time className="text-gray-600">
          {new Date(item.frontmatter.date).toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
          })}
        </time>
      )}
      
      {item.frontmatter.thumbnail && (
        <img 
          src={item.frontmatter.thumbnail} 
          alt={item.frontmatter.title}
          className="w-full h-64 object-cover rounded-lg my-6"
        />
      )}
      
      <div 
        className="prose prose-lg max-w-none mt-8"
        dangerouslySetInnerHTML={{ __html: item.content }}
      />
    </article>
  );
}
</file>

<file path="news/page.tsx">
import { getContentByType } from '@/lib/content';
import Link from 'next/link';

export default async function NewsPage() {
  const news = await getContentByType('news');

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-4xl font-bold mb-8">News</h1>
      
      <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
        {news.map((item) => (
          <article key={item.slug} className="border rounded-lg p-6 hover:shadow-lg transition-shadow">
            <h2 className="text-2xl font-semibold mb-2">
              <Link href={`/news/${item.slug}`} className="hover:text-blue-600">
                {item.frontmatter.title}
              </Link>
            </h2>
            
            {item.frontmatter.date && (
              <time className="text-sm text-gray-600">
                {new Date(item.frontmatter.date).toLocaleDateString()}
              </time>
            )}
            
            {item.frontmatter.description && (
              <p className="mt-4 text-gray-700">{item.frontmatter.description}</p>
            )}
            
            <Link 
              href={`/news/${item.slug}`}
              className="inline-block mt-4 text-blue-600 hover:text-blue-800"
            >
              Read more →
            </Link>
          </article>
        ))}
      </div>
      
      {news.length === 0 && (
        <p className="text-gray-600">No news items yet. Check back later!</p>
      )}
    </div>
  );
}
</file>

<file path="offers/diamond-advantage/page.tsx">
/* eslint-disable react/no-unescaped-entities */
"use client";
import { motion } from "framer-motion";
import Link from "next/link";
import { Navigation } from "@/components/Navigation";
import { Footer } from "@/components/Footer";
import { SectionHeader } from "@/components/SectionHeader";
import { TestimonialsSection } from "@/components/TestimonialsSection";

export default function DiamondAdvantagePage() {
  return (
    <main className="relative bg-black antialiased">
      <Navigation />

      {/* Hero Section */}
      <section className="pt-32 pb-16 px-6 relative">
        <div className="absolute inset-0 bg-gradient-to-b from-black via-primary/10 to-black" />
        <div className="max-w-4xl mx-auto relative z-10 text-center">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
            className="mb-4"
          >
            <div className="inline-block bg-primary/10 border border-primary/30 px-6 py-2 rounded-full mb-6">
              <span className="text-primary text-xl font-bold">$97</span>
            </div>
          </motion.div>
          <motion.h1
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, delay: 0.1 }}
            className="text-4xl md:text-6xl font-light mb-6"
          >
            Feel Calm, Clear, and <span className="text-primary">Centered</span>—Even in Chaos
          </motion.h1>
          <motion.p
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, delay: 0.2 }}
            className="text-xl md:text-2xl text-gray-300 mb-8"
          >
            Regain control of your emotions and your focus, no matter what life throws at you.
          </motion.p>
        </div>
      </section>

      {/* Core Offer Section */}
      <section id="offer" className="py-24 px-6 bg-gradient-to-b from-black via-secondary/30 to-black relative">
        <div className="max-w-6xl mx-auto">
          <SectionHeader
            title={
              <>
                Master the Art of <span className="text-primary">Staying Grounded</span>
              </>
            }
            subtitle="Diamond Advantage"
          />

          <div className="grid md:grid-cols-2 gap-8 mb-16">
            <motion.div
              initial={{ opacity: 0, x: -30 }}
              whileInView={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.8 }}
              viewport={{ once: true }}
              className="bg-secondary/50 backdrop-blur-sm border border-white/10 rounded-2xl p-8"
            >
              <h3 className="text-2xl mb-6 font-bold">What You'll Master</h3>
              <div className="space-y-4 text-gray-300">
                <div className="flex items-start">
                  <span className="text-primary mr-3 text-xl">→</span>
                  <p className="text-base">Master one simple practice to stay calm under pressure</p>
                </div>
                <div className="flex items-start">
                  <span className="text-primary mr-3 text-xl">→</span>
                  <p className="text-base">Build daily habits that create unshakable peace</p>
                </div>
                <div className="flex items-start">
                  <span className="text-primary mr-3 text-xl">→</span>
                  <p className="text-base">Reclaim your mental clarity—even in the middle of stress</p>
                </div>
              </div>
            </motion.div>

            <motion.div
              initial={{ opacity: 0, x: 30 }}
              whileInView={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.8 }}
              viewport={{ once: true }}
              className="bg-gradient-to-br from-primary/20 to-primary/5 border border-primary/30 rounded-2xl p-8"
            >
              <h3 className="text-2xl mb-6 font-bold">What's Included</h3>
              <ul className="space-y-3">
                <li className="flex items-start text-sm text-gray-300">
                  <span className="text-primary mr-2">✓</span>
                  <span>30-day tracker to measure your progress</span>
                </li>
                <li className="flex items-start text-sm text-gray-300">
                  <span className="text-primary mr-2">✓</span>
                  <span>Practice prompts to keep you consistent</span>
                </li>
                <li className="flex items-start text-sm text-gray-300">
                  <span className="text-primary mr-2">✓</span>
                  <span>Lifetime access to tools that keep you grounded</span>
                </li>
              </ul>
            </motion.div>
          </div>

          {/* Pricing Card */}
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
            viewport={{ once: true }}
            className="max-w-2xl mx-auto"
          >
            <div className="relative rounded-2xl p-8 bg-gradient-to-b from-primary/20 to-primary/5 border-2 border-primary">
              <div className="text-center mb-8">
                <h3 className="text-3xl mb-2 font-bold">Diamond Advantage</h3>
                <p className="text-gray-400 mb-4">Perfect for anyone who feels overwhelmed and needs to reset fast.</p>
                <div className="text-5xl font-light mb-6">
                  <span className="text-primary">$97</span>
                </div>
              </div>

              <Link href="/auth/signin">
                <button className="w-full py-4 rounded-lg font-medium transition-all bg-primary text-black hover:bg-primary/90 text-lg">
                  Access the Diamond Advantage
                </button>
              </Link>
            </div>
          </motion.div>

          <motion.div
            initial={{ opacity: 0 }}
            whileInView={{ opacity: 1 }}
            transition={{ duration: 0.8 }}
            viewport={{ once: true }}
            className="text-center mt-12"
          >
            <div className="bg-secondary/50 backdrop-blur-sm border border-white/10 rounded-2xl p-8 max-w-3xl mx-auto">
              <h3 className="text-2xl mb-4 text-yellow-400 font-bold">14-Day Unshakable Guarantee</h3>
              <p className="text-gray-300 text-base">
                If you don't feel more grounded, clear, and emotionally steady within 2 weeks—we'll refund every penny. <span className="font-bold">No questions asked.</span>
              </p>
            </div>
          </motion.div>
        </div>
      </section>

      {/* Testimonials */}
      <TestimonialsSection
        title="Success Stories"
        subtitle="Real transformations from Diamond Advantage members"
        testimonials={[
          {
            quote: "The Diamond Advantage gave me tools that actually work under real pressure. I feel grounded for the first time in years.",
            name: "Jennifer Martinez",
            designation: "Marketing Director",
            src: "https://images.unsplash.com/photo-1494790108377-be9c29b29330?q=80&w=600&h=600&fit=crop"
          },
          {
            quote: "After just two weeks, I stopped reacting to every trigger. The 30-day tracker kept me consistent and accountable.",
            name: "Robert Chen",
            designation: "Startup Founder",
            src: "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?q=80&w=600&h=600&fit=crop"
          },
          {
            quote: "I used to feel overwhelmed constantly. Now I have a simple practice that brings me back to center in seconds.",
            name: "Amanda Williams",
            designation: "Team Lead",
            src: "https://images.unsplash.com/photo-1438761681033-6461ffad8d80?q=80&w=600&h=600&fit=crop"
          }
        ]}
      />

      {/* CTA to Next Tier */}
      <section className="py-24 px-6 bg-gradient-to-b from-black via-primary/5 to-black">
        <div className="max-w-4xl mx-auto text-center">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
            viewport={{ once: true }}
          >
            <h2 className="text-3xl md:text-4xl font-light mb-6">
              Ready for the <span className="text-primary">Next Level</span>?
            </h2>
            <p className="text-xl text-gray-300 mb-8">
              Step into Diamond Edge Mastery and command respect in any room
            </p>
            <Link href="/offers/diamond-edge-mastery">
              <button className="bg-white/10 text-white px-8 py-4 rounded-full text-lg font-medium hover:bg-white/20 transition-all border border-white/20">
                Explore Diamond Edge Mastery
              </button>
            </Link>
          </motion.div>
        </div>
      </section>

      <Footer />
    </main>
  );
}
</file>

<file path="offers/diamond-edge-mastery/page.tsx">
/* eslint-disable react/no-unescaped-entities */
"use client";
import { motion } from "framer-motion";
import Link from "next/link";
import { Navigation } from "@/components/Navigation";
import { Footer } from "@/components/Footer";
import { SectionHeader } from "@/components/SectionHeader";
import { TestimonialsSection } from "@/components/TestimonialsSection";

export default function DiamondEdgeMasteryPage() {
  return (
    <main className="relative bg-black antialiased">
      <Navigation />

      {/* Hero Section */}
      <section className="pt-32 pb-16 px-6 relative">
        <div className="absolute inset-0 bg-gradient-to-b from-black via-primary/10 to-black" />
        <div className="max-w-4xl mx-auto relative z-10 text-center">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
            className="mb-4"
          >
            <div className="inline-block bg-primary/10 border border-primary/30 px-6 py-2 rounded-full mb-6">
              <span className="text-primary text-xl font-bold">$497</span>
            </div>
          </motion.div>
          <motion.h1
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, delay: 0.1 }}
            className="text-4xl md:text-6xl font-light mb-6"
          >
            Own the Room. Command Respect. Rise with <span className="text-primary">Confidence</span>.
          </motion.h1>
          <motion.p
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, delay: 0.2 }}
            className="text-xl md:text-2xl text-gray-300 mb-8"
          >
            Step into your power and become magnetic in any situation.
          </motion.p>
        </div>
      </section>

      {/* Core Offer Section */}
      <section id="offer" className="py-24 px-6 bg-gradient-to-b from-black via-secondary/30 to-black relative">
        <div className="max-w-6xl mx-auto">
          <SectionHeader
            title={
              <>
                Build <span className="text-primary">Magnetic Presence</span>
              </>
            }
            subtitle="Diamond Edge Mastery"
          />

          <div className="grid md:grid-cols-2 gap-8 mb-16">
            <motion.div
              initial={{ opacity: 0, x: -30 }}
              whileInView={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.8 }}
              viewport={{ once: true }}
              className="bg-secondary/50 backdrop-blur-sm border border-white/10 rounded-2xl p-8"
            >
              <h3 className="text-2xl mb-6 font-bold">What You'll Experience</h3>
              <div className="space-y-4 text-gray-300">
                <div className="flex items-start">
                  <span className="text-primary mr-3 text-xl">→</span>
                  <p className="text-base">Everything in Diamond Advantage</p>
                </div>
                <div className="flex items-start">
                  <span className="text-primary mr-3 text-xl">→</span>
                  <p className="text-base">2 live experiential sessions to integrate your new skills</p>
                </div>
                <div className="flex items-start">
                  <span className="text-primary mr-3 text-xl">→</span>
                  <p className="text-base">1 immersive 5-hour Diamond Seminar for a deep, lasting shift</p>
                </div>
                <div className="flex items-start">
                  <span className="text-primary mr-3 text-xl">→</span>
                  <p className="text-base">Access to a private community of high-achievers</p>
                </div>
                <div className="flex items-start">
                  <span className="text-primary mr-3 text-xl">→</span>
                  <p className="text-base">Ongoing exercises to keep you sharp and growing</p>
                </div>
              </div>
            </motion.div>

            <motion.div
              initial={{ opacity: 0, x: 30 }}
              whileInView={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.8 }}
              viewport={{ once: true }}
              className="bg-gradient-to-br from-primary/20 to-primary/5 border border-primary/30 rounded-2xl p-8"
            >
              <h3 className="text-2xl mb-6 font-bold">The Transformation</h3>
              <p className="text-gray-300 mb-6 leading-relaxed">
                This isn't just about learning techniques—it's about <span className="text-primary font-semibold">becoming someone new</span>.
              </p>
              <p className="text-gray-300 leading-relaxed">
                Through live sessions and deep seminar work, you'll rewire how you show up under pressure. You'll walk into rooms differently. People will notice. You'll feel it.
              </p>
            </motion.div>
          </div>

          {/* Pricing Card */}
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
            viewport={{ once: true }}
            className="max-w-2xl mx-auto"
          >
            <div className="relative rounded-2xl p-8 bg-gradient-to-b from-primary/20 to-primary/5 border-2 border-primary">
              <div className="absolute -top-4 left-1/2 -translate-x-1/2 bg-primary text-black px-4 py-1 rounded-full text-sm font-medium">
                Most Popular
              </div>
              <div className="text-center mb-8">
                <h3 className="text-3xl mb-2 font-bold">Diamond Edge Mastery</h3>
                <p className="text-gray-400 mb-4">Perfect for those ready to feel strong, clear, and unstoppable in real time.</p>
                <div className="text-5xl font-light mb-6">
                  <span className="text-primary">$497</span>
                </div>
              </div>

              <Link href="/auth/signin">
                <button className="w-full py-4 rounded-lg font-medium transition-all bg-primary text-black hover:bg-primary/90 text-lg">
                  Step Into Diamond Edge Mastery
                </button>
              </Link>
            </div>
          </motion.div>

          <motion.div
            initial={{ opacity: 0 }}
            whileInView={{ opacity: 1 }}
            transition={{ duration: 0.8 }}
            viewport={{ once: true }}
            className="text-center mt-12"
          >
            <div className="bg-secondary/50 backdrop-blur-sm border border-white/10 rounded-2xl p-8 max-w-3xl mx-auto">
              <h3 className="text-2xl mb-4 text-yellow-400 font-bold">14-Day Unshakable Guarantee</h3>
              <p className="text-gray-300 text-base">
                If you don't feel more grounded, clear, and emotionally steady within 2 weeks—we'll refund every penny. <span className="font-bold">No questions asked.</span>
              </p>
            </div>
          </motion.div>
        </div>
      </section>

      {/* Testimonials */}
      <TestimonialsSection
        title="Success Stories"
        subtitle="Real transformations from Diamond Edge Mastery members"
        testimonials={[
          {
            quote: "The live sessions were game-changing. I walked into my next board meeting with a presence I've never had before. People noticed.",
            name: "Michael Thompson",
            designation: "VP of Operations",
            src: "https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?q=80&w=600&h=600&fit=crop"
          },
          {
            quote: "The 5-hour seminar was intense but profound. I integrated skills I'd been trying to learn for years. This is real transformation.",
            name: "Sarah Chen",
            designation: "Tech Executive",
            src: "https://images.unsplash.com/photo-1438761681033-6461ffad8d80?q=80&w=600&h=600&fit=crop"
          },
          {
            quote: "The private community is invaluable. Being surrounded by other high-achievers keeps me sharp and accountable.",
            name: "David Martinez",
            designation: "Entrepreneur",
            src: "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?q=80&w=600&h=600&fit=crop"
          }
        ]}
      />

      {/* CTA to Next Tier */}
      <section className="py-24 px-6 bg-gradient-to-b from-black via-primary/5 to-black">
        <div className="max-w-4xl mx-auto text-center">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
            viewport={{ once: true }}
          >
            <h2 className="text-3xl md:text-4xl font-light mb-6">
              Ready for the <span className="text-primary">Ultimate Test</span>?
            </h2>
            <p className="text-xl text-gray-300 mb-8">
              Enter Pressure Room One and transform how you handle stress—forever
            </p>
            <Link href="/offers/pressure-room-one">
              <button className="bg-white/10 text-white px-8 py-4 rounded-full text-lg font-medium hover:bg-white/20 transition-all border border-white/20">
                Explore Pressure Room One
              </button>
            </Link>
          </motion.div>
        </div>
      </section>

      <Footer />
    </main>
  );
}
</file>

<file path="offers/pressure-room-one/page.tsx">
/* eslint-disable react/no-unescaped-entities */
"use client";
import { motion } from "framer-motion";
import Link from "next/link";
import { Navigation } from "@/components/Navigation";
import { Footer } from "@/components/Footer";
import { SectionHeader } from "@/components/SectionHeader";
import { TestimonialsSection } from "@/components/TestimonialsSection";

export default function PressureRoomOnePage() {
  return (
    <main className="relative bg-black antialiased">
      <Navigation />

      {/* Hero Section */}
      <section className="pt-32 pb-16 px-6 relative">
        <div className="absolute inset-0 bg-gradient-to-b from-black via-primary/10 to-black" />
        <div className="max-w-4xl mx-auto relative z-10 text-center">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
            className="mb-4"
          >
            <div className="inline-block bg-primary/10 border border-primary/30 px-6 py-2 rounded-full mb-6">
              <span className="text-primary text-xl font-bold">$1,997</span>
            </div>
          </motion.div>
          <motion.h1
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, delay: 0.1 }}
            className="text-4xl md:text-6xl font-light mb-6"
          >
            Step Into the Fire. Walk Out <span className="text-primary">Unshakable</span>.
          </motion.h1>
          <motion.p
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, delay: 0.2 }}
            className="text-xl md:text-2xl text-gray-300 mb-8"
          >
            Transform how you handle stress and pressure—forever.
          </motion.p>
        </div>
      </section>

      {/* Core Offer Section */}
      <section id="offer" className="py-24 px-6 bg-gradient-to-b from-black via-secondary/30 to-black relative">
        <div className="max-w-6xl mx-auto">
          <SectionHeader
            title={
              <>
                The <span className="text-primary">Pressure Room One</span> Experience
              </>
            }
            subtitle="3-Day Immersive Transformation"
          />

          <div className="grid md:grid-cols-2 gap-8 mb-16">
            <motion.div
              initial={{ opacity: 0, x: -30 }}
              whileInView={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.8 }}
              viewport={{ once: true }}
              className="bg-secondary/50 backdrop-blur-sm border border-white/10 rounded-2xl p-8"
            >
              <h3 className="text-2xl mb-6 font-bold">What You'll Experience</h3>
              <div className="space-y-4 text-gray-300">
                <div className="flex items-start">
                  <span className="text-primary mr-3 text-xl">→</span>
                  <p className="text-base">Everything in Diamond Edge Mastery</p>
                </div>
                <div className="flex items-start">
                  <span className="text-primary mr-3 text-xl">→</span>
                  <p className="text-base">Full access to the 3-day Pressure Room One experience</p>
                </div>
                <div className="flex items-start">
                  <span className="text-primary mr-3 text-xl">→</span>
                  <p className="text-base">Train under real-world tension and rewire your nervous system</p>
                </div>
                <div className="flex items-start">
                  <span className="text-primary mr-3 text-xl">→</span>
                  <p className="text-base">Master control over your emotions in any situation</p>
                </div>
                <div className="flex items-start">
                  <span className="text-primary mr-3 text-xl">→</span>
                  <p className="text-base">Step into your new presence—strong, clear, undeniable</p>
                </div>
              </div>
            </motion.div>

            <motion.div
              initial={{ opacity: 0, x: 30 }}
              whileInView={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.8 }}
              viewport={{ once: true }}
              className="bg-gradient-to-br from-primary/20 to-primary/5 border border-primary/30 rounded-2xl p-8"
            >
              <h3 className="text-2xl mb-6 font-bold">This Is Different</h3>
              <p className="text-gray-300 mb-6 leading-relaxed">
                Pressure Room One isn't a seminar. It's not a workshop. It's an <span className="text-primary font-semibold">immersive experience</span> designed to test you, break you open, and rebuild you stronger.
              </p>
              <p className="text-gray-300 mb-6 leading-relaxed">
                For 3 days, you'll train under real-world tension. You'll face the parts of yourself you've been avoiding. You'll rewire your nervous system at the deepest level.
              </p>
              <p className="text-gray-300 leading-relaxed">
                <span className="text-primary font-semibold">This is where transformation stops being theoretical and becomes visceral.</span>
              </p>
            </motion.div>
          </div>

          {/* Pricing Card */}
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
            viewport={{ once: true }}
            className="max-w-2xl mx-auto"
          >
            <div className="relative rounded-2xl p-8 bg-gradient-to-b from-primary/20 to-primary/5 border-2 border-primary">
              <div className="text-center mb-8">
                <h3 className="text-3xl mb-2 font-bold">Pressure Room One</h3>
                <p className="text-gray-400 mb-4">Perfect for those ready to experience the shift—not just think about it.</p>
                <div className="text-5xl font-light mb-6">
                  <span className="text-primary">$1,997</span>
                </div>
              </div>

              <Link href="/auth/signin">
                <button className="w-full py-4 rounded-lg font-medium transition-all bg-primary text-black hover:bg-primary/90 text-lg">
                  Enter Pressure Room One
                </button>
              </Link>
            </div>
          </motion.div>

          <motion.div
            initial={{ opacity: 0 }}
            whileInView={{ opacity: 1 }}
            transition={{ duration: 0.8 }}
            viewport={{ once: true }}
            className="text-center mt-12"
          >
            <div className="bg-secondary/50 backdrop-blur-sm border border-white/10 rounded-2xl p-8 max-w-3xl mx-auto">
              <h3 className="text-2xl mb-4 text-yellow-400 font-bold">Transformation Guarantee</h3>
              <p className="text-gray-300 text-base">
                Complete the 3-day Pressure Room One experience. If you don't feel fundamentally different in how you handle pressure, we'll refund your investment. <span className="font-bold">We stand behind the work.</span>
              </p>
            </div>
          </motion.div>
        </div>
      </section>

      {/* What Happens Inside */}
      <section className="py-24 px-6 bg-gradient-to-b from-black via-primary/5 to-black">
        <div className="max-w-6xl mx-auto">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
            viewport={{ once: true }}
            className="text-center mb-16"
          >
            <h2 className="text-4xl md:text-5xl mb-4">What Happens <span className="text-primary">Inside</span></h2>
            <p className="text-xl text-gray-300 max-w-3xl mx-auto">
              A 3-day journey designed to rewire how you respond to pressure
            </p>
          </motion.div>

          <div className="grid md:grid-cols-3 gap-8">
            {[
              {
                day: "Day 1",
                title: "Stabilize",
                description: "Build nervous system mastery. Learn to regulate your internal state under real-world pressure.",
                focus: "Foundation & Presence"
              },
              {
                day: "Day 2",
                title: "Test",
                description: "Face high-pressure scenarios. Discover where you collapse and why. Train through it.",
                focus: "Breaking Patterns"
              },
              {
                day: "Day 3",
                title: "Integrate",
                description: "Lock in your new operating system. Walk out with a presence that doesn't waver under stress.",
                focus: "Permanent Shift"
              }
            ].map((day, index) => (
              <motion.div
                key={index}
                initial={{ opacity: 0, y: 30 }}
                whileInView={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.6, delay: index * 0.1 }}
                viewport={{ once: true }}
                className="bg-secondary/50 backdrop-blur-sm border border-white/10 rounded-2xl p-8"
              >
                <div className="text-primary text-sm font-bold mb-2">{day.day}</div>
                <h3 className="text-2xl mb-4 font-bold">{day.title}</h3>
                <p className="text-gray-300 mb-4 leading-relaxed">{day.description}</p>
                <div className="text-sm text-gray-400 italic">{day.focus}</div>
              </motion.div>
            ))}
          </div>
        </div>
      </section>

      {/* Testimonials */}
      <TestimonialsSection
        title="Success Stories"
        subtitle="Real transformations from Pressure Room One graduates"
        testimonials={[
          {
            quote: "Pressure Room One was the most intense experience of my life—and the most valuable. I walked out fundamentally different.",
            name: "Marcus Johnson",
            designation: "CEO",
            src: "https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?q=80&w=600&h=600&fit=crop"
          },
          {
            quote: "I used to freeze under pressure. After 3 days in the Pressure Room, I now thrive in chaos. My team has noticed.",
            name: "Emily Rodriguez",
            designation: "Director of Strategy",
            src: "https://images.unsplash.com/photo-1438761681033-6461ffad8d80?q=80&w=600&h=600&fit=crop"
          },
          {
            quote: "This isn't theory. You're tested, broken open, and rebuilt. The nervous system rewiring is real and permanent.",
            name: "David Kim",
            designation: "Founder",
            src: "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?q=80&w=600&h=600&fit=crop"
          }
        ]}
      />

      {/* CTA to Next Tier */}
      <section className="py-24 px-6 bg-gradient-to-b from-black via-primary/5 to-black">
        <div className="max-w-4xl mx-auto text-center">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
            viewport={{ once: true }}
          >
            <h2 className="text-3xl md:text-4xl font-light mb-6">
              Ready for <span className="text-primary">Total Transformation</span>?
            </h2>
            <p className="text-xl text-gray-300 mb-8">
              Join DiamondMind Immersion and live unshakable every single day
            </p>
            <Link href="/collective">
              <button className="bg-white/10 text-white px-8 py-4 rounded-full text-lg font-medium hover:bg-white/20 transition-all border border-white/20">
                Explore DiamondMind Immersion
              </button>
            </Link>
          </motion.div>
        </div>
      </section>

      <Footer />
    </main>
  );
}
</file>

<file path="program/page.tsx">
/* eslint-disable react/no-unescaped-entities */
"use client";
import { motion } from "framer-motion";
import Link from "next/link";
import { Navigation } from "@/components/Navigation";
import { Footer } from "@/components/Footer";
import { SectionHeader } from "@/components/SectionHeader";
import { TestimonialsSection } from "@/components/TestimonialsSection";

export default function ProgramPage() {
  return (
    <main className="relative bg-black antialiased">
      <Navigation />

      {/* Hero Section */}
      <section className="pt-32 pb-16 px-6 relative">
        <div className="absolute inset-0 bg-gradient-to-b from-black via-primary/10 to-black" />
        <div className="max-w-4xl mx-auto relative z-10 text-center">
          <motion.h1
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
            className="text-4xl md:text-6xl font-light mb-6"
          >
            The Diamond <span className="text-primary">Activation</span> Experience
          </motion.h1>
          <motion.p
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8, delay: 0.2 }}
            className="text-xl md:text-2xl text-gray-300 mb-8"
          >
            Transform how you think, feel, and show up under pressure
          </motion.p>
        </div>
      </section>

      {/* Core Offer Section */}
      <section id="offers" className="py-6 px-6 bg-gradient-to-b from-black via-secondary/30 to-black relative">
        <div className="max-w-6xl mx-auto">
          <SectionHeader
            title={
              <>
                You Weren't Made to <span className="text-primary">Survive</span> Pressure.<br />
                You Were Made to <span className="text-primary">Become Something</span> Under It.
              </>
            }
          />

          <div className="grid md:grid-cols-2 gap-8 mb-16">
            {/* Note: Use `animate` for above-fold content - whileInView doesn't trigger for initially-visible elements */}
            <motion.div
              initial={{ opacity: 0, x: -30 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.8 }}
              className="bg-secondary/50 backdrop-blur-sm border border-white/10 rounded-2xl p-8"
            >
              <h3 className="text-xl mb-4 font-bold">The Problem</h3>
              <div className="space-y-3 text-gray-300 leading-relaxed">
                <p className="text-base">You feel <span className="text-primary">stuck</span>—not because you're lazy, but because you've outgrown your current identity.</p>
                <p className="text-base"><span className="text-primary">Your nervous system is dysregulated.</span> Your emotions spike and crash. Your confidence wavers.</p>
                <p className="text-base">And no amount of positive thinking, productivity hacks, or hustle is fixing it.</p>
                <p className="text-base font-normal text-white pt-4">Because the problem isn't your mindset. It's your <span className="text-primary">operating system</span>.</p>
              </div>
            </motion.div>

            {/* Note: Use `animate` for above-fold content - whileInView doesn't trigger for initially-visible elements */}
            <motion.div
              initial={{ opacity: 0, x: 30 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ duration: 0.8 }}
              className="bg-gradient-to-br from-primary/20 to-primary/5 border border-primary/30 rounded-2xl p-8"
            >
              <h3 className="text-xl mb-4 font-bold">The Solution</h3>
              <p className="text-sm text-gray-300 mb-5 leading-relaxed">
                The Diamond Activation Experience is a complete transformation system that rewires how you think, feel, and show up under pressure.
              </p>
              <div className="space-y-2.5 text-sm text-gray-300">
                <p className="flex items-start text-base">
                  <span className="text-primary mr-2">→</span>
                  How to regulate your nervous system in real-time
                </p>
                <p className="flex items-start text-base">
                  <span className="text-primary mr-2">→</span>
                  How to clear emotional blocks instantly
                </p>
                <p className="flex items-start text-base">
                  <span className="text-primary mr-2">→</span>
                  How to install a new identity that doesn't collapse under stress
                </p>
                <p className="flex items-start text-base">
                  <span className="text-primary mr-2">→</span>
                  How to lead with <span className="text-primary font-bold">&nbsp;magnetic presence</span>
                </p>
              </div>
            </motion.div>
          </div>

          {/* Pricing Options */}
          <div className="grid md:grid-cols-3 gap-8 mb-12">
            {[
              {
                name: "Diamond Advantage",
                price: "$97",
                description: "Feel Calm, Clear, and Centered—Even in Chaos",
                tagline: "Regain control of your emotions and your focus, no matter what life throws at you.",
                features: [
                  "Master one simple practice to stay calm under pressure",
                  "Build daily habits that create unshakable peace",
                  "Reclaim your mental clarity—even in the middle of stress",
                  "30-day tracker to measure your progress",
                  "Practice prompts to keep you consistent",
                  "Lifetime access to tools that keep you grounded"
                ],
                ideal: "Perfect for anyone who feels overwhelmed and needs to reset fast.",
                cta: "Access the Diamond Advantage",
                popular: false
              },
              {
                name: "Diamond Edge Mastery",
                price: "$497",
                description: "Own the Room. Command Respect. Rise with Confidence.",
                tagline: "Step into your power and become magnetic in any situation.",
                features: [
                  "Everything in Diamond Advantage",
                  "2 live experiential sessions to integrate your new skills",
                  "1 immersive 5-hour Diamond Seminar for a deep, lasting shift",
                  "Access to a private community of high-achievers",
                  "Ongoing exercises to keep you sharp and growing"
                ],
                ideal: "Perfect for those ready to feel strong, clear, and unstoppable in real time.",
                cta: "Step Into Diamond Edge Mastery",
                popular: true
              },
              {
                name: "Pressure Room One",
                price: "$1,997",
                description: "Step Into the Fire. Walk Out Unshakable.",
                tagline: "Transform how you handle stress and pressure—forever.",
                features: [
                  "Everything in Diamond Edge Mastery",
                  "Full access to the 3-day Pressure Room One experience",
                  "Train under real-world tension and rewire your nervous system",
                  "Master control over your emotions in any situation",
                  "Step into your new presence—strong, clear, undeniable"
                ],
                ideal: "Perfect for those ready to experience the shift—not just think about it.",
                cta: "Enter Pressure Room One",
                popular: false
              }
            ].map((tier, index) => (
              <motion.div
                key={index}
                initial={{ opacity: 0, y: 30 }}
                whileInView={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.6, delay: index * 0.1 }}
                viewport={{ once: true }}
                className={`relative rounded-2xl p-8 flex flex-col ${tier.popular
                  ? 'bg-gradient-to-b from-primary/20 to-primary/5 border-2 border-primary'
                  : 'bg-secondary/50 border border-white/10'
                  }`}
              >
                {tier.popular && (
                  <div className="absolute -top-4 left-1/2 -translate-x-1/2 bg-primary text-black px-4 py-1 rounded-full text-sm font-medium">
                    Most Popular
                  </div>
                )}

                <h3 className="text-2xl mb-3 font-bold">{tier.name}</h3>
                <div className="text-4xl font-light mb-4">{tier.price}</div>
                <p className="text-white font-medium mb-2 text-lg">{tier.description}</p>
                <p className="text-gray-400 mb-6 text-base">{tier.tagline}</p>

                <ul className="space-y-3 mb-6 flex-1">
                  {tier.features.map((feature, idx) => (
                    <li key={idx} className="flex items-start text-sm text-gray-300">
                      <span className="text-primary mr-2 flex-shrink-0">✓</span>
                      <span>{feature}</span>
                    </li>
                  ))}
                </ul>

                <p className="text-sm text-gray-500 italic mb-6">{tier.ideal}</p>

                <Link href="/auth/signin" className="mt-auto">
                  <button
                    className={`w-full py-3 rounded-lg font-medium transition-all ${tier.popular
                      ? 'bg-primary text-black hover:bg-primary/90'
                      : 'bg-white/10 text-white hover:bg-white/20'
                      }`}
                  >
                    {tier.cta}
                  </button>
                </Link>
              </motion.div>
            ))}
          </div>

          <motion.div
            initial={{ opacity: 0 }}
            whileInView={{ opacity: 1 }}
            transition={{ duration: 0.8 }}
            viewport={{ once: true }}
            className="text-center"
          >
            <div className="bg-secondary/50 backdrop-blur-sm border border-white/10 rounded-2xl p-8 max-w-3xl mx-auto">
              <h3 className="text-2xl mb-4 text-yellow-400 font-bold">14-Day Unshakable Guarantee</h3>
              <p className="text-gray-300 text-base">
                If you don't feel more grounded, clear, and emotionally steady within 2 weeks—we'll refund every penny. <span className="font-bold">No questions asked.</span>
              </p>
            </div>
          </motion.div>
        </div>
      </section>

      {/* Testimonials */}
      <TestimonialsSection
        title="Success Stories"
        subtitle="Real transformations from program graduates"
        testimonials={[
          {
            quote: "The Diamond Activation Experience gave me tools that actually work under real pressure. My entire nervous system feels upgraded.",
            name: "Mark Thompson",
            designation: "Corporate Leader",
            src: "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?q=80&w=600&h=600&fit=crop"
          },
          {
            quote: "After completing the program, I stopped reacting to every trigger. I finally feel in control of my nervous system and my life.",
            name: "Sarah Chen",
            designation: "Tech VP",
            src: "https://images.unsplash.com/photo-1438761681033-6461ffad8d80?q=80&w=600&h=600&fit=crop"
          },
          {
            quote: "The identity work was profound. I've cleared patterns I've carried for decades. This isn't just coaching—it's transformation.",
            name: "David Martinez",
            designation: "Founder & CEO",
            src: "https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?q=80&w=600&h=600&fit=crop"
          }
        ]}
      />

      {/* CTA to Collective */}
      <section className="py-24 px-6 bg-gradient-to-b from-black via-primary/5 to-black">
        <div className="max-w-4xl mx-auto text-center">
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
            viewport={{ once: true }}
          >
            <h2 className="text-3xl md:text-4xl font-light mb-6">
              Ready for the <span className="text-primary">Next Level</span>?
            </h2>
            <p className="text-xl text-gray-300 mb-8">
              The DiamondMind Collective is a yearlong transformation journey for emerging leaders
            </p>
            <Link href="/collective">
              <button className="bg-primary text-black px-8 py-4 rounded-full text-lg font-medium hover:bg-primary/90 transition-all">
                Explore the Collective
              </button>
            </Link>
          </motion.div>
        </div>
      </section>

      <Footer />
    </main>
  );
}
</file>

<file path="globals.css">
@import "tailwindcss";
@import "tw-animate-css";
@plugin "@tailwindcss/typography";

@custom-variant dark (&:is(.dark *));

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
  --color-sidebar-ring: var(--sidebar-ring);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar: var(--sidebar);
  --color-chart-5: var(--chart-5);
  --color-chart-4: var(--chart-4);
  --color-chart-3: var(--chart-3);
  --color-chart-2: var(--chart-2);
  --color-chart-1: var(--chart-1);
  --color-ring: var(--ring);
  --color-input: var(--input);
  --color-border: var(--border);
  --color-destructive: var(--destructive);
  --color-accent-foreground: var(--accent-foreground);
  --color-accent: var(--accent);
  --color-muted-foreground: var(--muted-foreground);
  --color-muted: var(--muted);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-secondary: var(--secondary);
  --color-primary-foreground: var(--primary-foreground);
  --color-primary: var(--primary);
  --color-popover-foreground: var(--popover-foreground);
  --color-popover: var(--popover);
  --color-card-foreground: var(--card-foreground);
  --color-card: var(--card);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
}

:root {
  --radius: 0.625rem;
  /* TNITD Pure Black Theme */
  --background: #000000;
  --foreground: #ffffff;
  --card: #000000;
  --card-foreground: #ffffff;
  --popover: #000000;
  --popover-foreground: #ffffff;
  --primary: #4fc3f7; /* Diamond blue accent */
  --primary-foreground: #000000;
  --secondary: #111111;
  --secondary-foreground: #ffffff;
  --muted: #333333;
  --muted-foreground: #999999;
  --accent: #4fc3f7;
  --accent-foreground: #000000;
  --destructive: oklch(0.577 0.245 27.325);
  --border: rgba(255, 255, 255, 0.1);
  --input: rgba(255, 255, 255, 0.15);
  --ring: rgba(79, 195, 247, 0.5);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: #000000;
  --sidebar-foreground: #ffffff;
  --sidebar-primary: #4fc3f7;
  --sidebar-primary-foreground: #000000;
  --sidebar-accent: #111111;
  --sidebar-accent-foreground: #ffffff;
  --sidebar-border: rgba(255, 255, 255, 0.1);
  --sidebar-ring: rgba(79, 195, 247, 0.5);
}

.dark {
  /* Keep same as root since we're always dark */
  --background: #000000;
  --foreground: #ffffff;
  --card: #000000;
  --card-foreground: #ffffff;
  --popover: #000000;
  --popover-foreground: #ffffff;
  --primary: #4fc3f7;
  --primary-foreground: #000000;
  --secondary: #111111;
  --secondary-foreground: #ffffff;
  --muted: #333333;
  --muted-foreground: #999999;
  --accent: #4fc3f7;
  --accent-foreground: #000000;
  --destructive: oklch(0.704 0.191 22.216);
  --border: rgba(255, 255, 255, 0.1);
  --input: rgba(255, 255, 255, 0.15);
  --ring: rgba(79, 195, 247, 0.5);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: #000000;
  --sidebar-foreground: #ffffff;
  --sidebar-primary: #4fc3f7;
  --sidebar-primary-foreground: #000000;
  --sidebar-accent: #111111;
  --sidebar-accent-foreground: #ffffff;
  --sidebar-border: rgba(255, 255, 255, 0.1);
  --sidebar-ring: rgba(79, 195, 247, 0.5);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }

  /* TNITD Typography System - Ultrathink */
  h1 {
    font-size: clamp(3rem, 8vw, 6rem);
    font-weight: 100;
    letter-spacing: -0.02em;
    line-height: 0.95;
  }

  h2 {
    font-size: clamp(2rem, 5vw, 3.5rem);
    font-weight: 200;
    letter-spacing: -0.01em;
    line-height: 1.1;
  }

  h3 {
    font-size: clamp(1.5rem, 3vw, 2.5rem);
    font-weight: 200;
    letter-spacing: -0.01em;
    line-height: 1.2;
  }

  p,
  .body-text {
    font-size: clamp(1.125rem, 2vw, 1.25rem);
    font-weight: 300;
    line-height: 1.7;
  }
}

@keyframes spotlight {
  0% {
    opacity: 0;
    transform: translate(-72%, -62%) scale(0.5);
  }
  100% {
    opacity: 1;
    transform: translate(-50%, -40%) scale(1);
  }
}

.animate-spotlight {
  animation: spotlight 2s ease 0.75s 1 forwards;
}

@keyframes scroll {
  from {
    transform: translateX(0);
  }
  to {
    transform: translateX(calc(-50% - 0.5rem));
  }
}

.animate-scroll {
  animation: scroll var(--animation-duration) linear infinite
    var(--animation-direction);
}

.bg-grid-white\/\[0\.02\] {
  background-image: linear-gradient(
      to right,
      rgba(255, 255, 255, 0.02) 1px,
      transparent 1px
    ),
    linear-gradient(to bottom, rgba(255, 255, 255, 0.02) 1px, transparent 1px);
  background-size: 50px 50px;
}

/* TNITD Coherent Transitions */
@keyframes fadeIn {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(30px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.animate-fadeIn {
  animation: fadeIn 0.5s cubic-bezier(0.645, 0.045, 0.355, 1) forwards;
}

.animate-fadeInUp {
  animation: fadeInUp 0.6s cubic-bezier(0.645, 0.045, 0.355, 1) forwards;
}

/* Smooth transitions for interactive elements only */
a,
button,
input,
textarea,
select {
  transition-property: color, background-color, border-color, outline-color,
    text-decoration-color, fill, stroke, opacity, box-shadow, transform, filter,
    backdrop-filter;
  transition-timing-function: cubic-bezier(0.25, 0.1, 0.25, 1);
  transition-duration: 300ms;
}

/* Ensure smooth scrolling */
html {
  scroll-behavior: smooth;
}
</file>

<file path="layout.tsx">
"use client";
import { Geist, Geist_Mono } from "next/font/google";
import { SpeedInsights } from "@vercel/speed-insights/next"
import { ChatProvider } from "@/contexts/ChatContext";
import { Providers } from "./providers";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <head>
        {/* Resource hints for performance optimization */}
        <link rel="preconnect" href="https://images.unsplash.com" />
        <link rel="dns-prefetch" href="https://js.stripe.com" />
        <link rel="dns-prefetch" href="https://fonts.googleapis.com" />
      </head>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <Providers>
          <ChatProvider>
            <SpeedInsights />
            {children}
          </ChatProvider>
        </Providers>
      </body>
    </html>
  );
}
</file>

<file path="page.tsx">
/* eslint-disable react/no-unescaped-entities */
"use client";
import { motion } from "framer-motion";
import Link from "next/link";
import dynamic from "next/dynamic";
import { BentoGrid, BentoGridItem } from "@/components/ui/bento-grid";
import { CardSpotlight } from "@/components/ui/card-spotlight";
import { HoverBorderGradient } from "@/components/ui/hover-border-gradient";
import { Navigation } from "@/components/Navigation";
import { Footer } from "@/components/Footer";
import { HeroSection } from "@/components/HeroSection";
import { ProblemPainPointsGrid } from "@/components/ProblemPainPointsGrid";
import { TestimonialsSection } from "@/components/TestimonialsSection";
import { LeadMagnetSection } from "@/components/LeadMagnetSection";
import { BookSalesSection } from "@/components/BookSalesSection";
import { SectionHeader } from "@/components/SectionHeader";
import { IconCheck } from "@tabler/icons-react";

const World = dynamic(() => import("@/components/ui/globe").then((m) => m.World), {
    ssr: false,
});

export default function LandingPage() {
    const globeConfig = {
        pointSize: 4,
        globeColor: "#062056",
        showAtmosphere: true,
        atmosphereColor: "#4fc3f7",
        atmosphereAltitude: 0.1,
        emissive: "#062056",
        emissiveIntensity: 0.3,
        shininess: 0.9,
        polygonColor: "rgba(79,195,247,1)",
        ambientLight: "#4fc3f7",
        directionalLeftLight: "#ffffff",
        directionalTopLight: "#ffffff",
        pointLight: "#ffffff",
        arcTime: 1000,
        arcLength: 0.9,
        rings: 1,
        maxRings: 3,
        initialPosition: { lat: 34.0522, lng: -118.2437 },
        autoRotate: true,
        autoRotateSpeed: 0.5,
    };

    const colors = ["#4fc3f7", "#06b6d4", "#3b82f6"];
    const sampleArcs = [
        {
            order: 1,
            startLat: 34.0522,
            startLng: -118.2437,
            endLat: 40.7128,
            endLng: -74.006,
            arcAlt: 0.3,
            color: colors[0],
        },
        {
            order: 2,
            startLat: 51.5072,
            startLng: -0.1276,
            endLat: 40.7128,
            endLng: -74.006,
            arcAlt: 0.3,
            color: colors[1],
        },
        {
            order: 3,
            startLat: -33.8688,
            startLng: 151.2093,
            endLat: 34.0522,
            endLng: -118.2437,
            arcAlt: 0.5,
            color: colors[2],
        },
    ];

    return (
        <main className="relative bg-black antialiased">
            <Navigation />

            {/* Hero Section */}
            <HeroSection
                badge="You don't need to outpace AI. You need to out-presence it."
                title={
                    <>
                        While Everyone&apos;s Panicking About <span className="text-primary">AI</span>,<br />
                        We&apos;re Training the <span className="text-primary">One Thing</span><br />
                        Machines Will Never Replace
                    </>
                }
                subtitle={
                    <>
                        Master <span className="text-primary font-normal">presence under pressure</span>.&nbsp;
                        Regulate your nervous system.&nbsp;
                        Rewire your identity.&nbsp;
                        Lead with <span className="text-primary font-normal">unshakable clarity</span>—even when the world around you is unraveling.
                    </>
                }
                primaryCta={{
                    text: "Get the Free Diamond Sprint",
                    onClick: () => document.getElementById('lead-magnet')?.scrollIntoView({ behavior: 'smooth' })
                }}
                secondaryCta={{
                    text: "See How It Works",
                    onClick: () => document.getElementById('problem')?.scrollIntoView({ behavior: 'smooth' })
                }}
                socialProof={{
                    stat: "Professionals trained in this system earned 23% more revenue than those who weren’t. The difference? Presence under pressure.",
                    testimonial: "I'm not the same person I was a week ago. This wasn’t just motivation. It was a transformation from the inside out",
                    author: "Misty U."
                }}
                microTestimonials={[
                    "Michael didn’t just teach us how to perform—he showed us how to become.” — Connor, Training Attendee",
                    "Since Michael’s class, my averages jumped from $900 to $1,800. More importantly, I love who I’ve become.”— Mark, Finance Manager",
                    "This was bigger than sales. This was soul work.” — Fabian, Sales Professional"
                ]}
            />

            {/* Globe Section - Global Community */}
            <section className="py-24 px-6 bg-black relative">
                <div className="max-w-7xl mx-auto w-full relative">
                    <SectionHeader
                        title={
                            <>
                                Join a Diamond Mind <span className="text-primary">Global Movement</span>
                            </>
                        }
                        subtitle="Thousands of leaders, entrepreneurs, and change-makers across six continents are turning pressure into clarity. The movement is growing. Your place is waiting."
                    />
                    <div className="relative w-full h-[600px]">
                        <World data={sampleArcs} globeConfig={globeConfig} />
                    </div>
                </div>
            </section>

            {/* The Problem - Pain Points */}
            <ProblemPainPointsGrid
                title={
                    <>
                        The <span className="text-primary">Pressure</span> You&apos;re Under<br />Isn&apos;t the Problem
                    </>
                }
                subtitle={
                    <>
                        It&apos;s that your <span className="text-primary">nervous system</span> isn&apos;t trained for it
                    </>
                }
                painPoints={[
                    {
                        title: "Burned Out by Hustle Culture",
                        description: "You're high-functioning but emotionally exhausted. Something is 'off' but you can't name it."
                    },
                    {
                        title: "Identity Crisis",
                        description: "After a major life change—divorce, layoff, or transition—you're trying to find your purpose again."
                    },
                    {
                        title: "AI Anxiety",
                        description: "You fear becoming irrelevant in a world that's moving too fast. Will you be replaced?"
                    },
                    {
                        title: "Lost Confidence",
                        description: "You never feel truly confident. Imposter syndrome follows you into every room."
                    },
                    {
                        title: "Emotional Dysregulation",
                        description: "Your emotions spike and crash. You're triggered easily and can't get back to center."
                    },
                    {
                        title: "Living Small",
                        description: "You're terrified of living a small life—of not being able to protect or provide for your family."
                    }
                ]}
                quote={{
                    text: (
                        <>
                            When you choose and embody your identity, you stop living by default—and start living by design.
                        </>
                    ),
                    author: "Michael T Dugan"
                }}
            />

            {/* The Solution - Diamond Operating System */}
            <section id="solution" className="py-24 px-6 relative">
                <div className="absolute inset-0 bg-gradient-to-b from-black via-primary/5 to-black" />

                <div className="max-w-6xl mx-auto relative z-10">
                    <SectionHeader
                        title={
                            <>
                                Introducing the <span className="text-primary">Diamond Operating System</span>
                            </>
                        }
                        subtitle="A complete transformation system that rewires how you think, feel, and show up under pressure"
                    />

                    <BentoGrid className="mb-16">
                        <motion.div
                            initial={{ opacity: 0, y: 20 }}
                            whileInView={{ opacity: 1, y: 0 }}
                            transition={{ duration: 0.6, delay: 0 }}
                            viewport={{ once: true, amount: 0.2 }}
                        >
                            <BentoGridItem
                                title="The Diamond Operating System"
                                description="Converts pressure into clarity, chaos into calm. You don't just react better—you lead better. You become the person people trust in crisis."
                                header={
                                    <div className="flex h-full min-h-[6rem] w-full flex-1 items-center justify-center rounded-xl overflow-hidden bg-gradient-to-br from-primary/20 to-primary/5">
                                        <img
                                            src="https://images.unsplash.com/photo-1534224039826-c7a0eda0e6b3?q=80&w=800&h=400&fit=crop"
                                            alt="Meditation and consciousness"
                                            className="w-full h-full object-cover opacity-60"
                                        />
                                    </div>
                                }
                                className="md:col-span-2"
                            />
                        </motion.div>
                        <motion.div
                            initial={{ opacity: 0, y: 20 }}
                            whileInView={{ opacity: 1, y: 0 }}
                            transition={{ duration: 0.6, delay: 0.1 }}
                            viewport={{ once: true, amount: 0.2 }}
                        >
                            <BentoGridItem
                                title="Swiss Army Knife"
                                description="Real-time emotional regulation. Get back to center instantly, no matter what's happening. Body, Breath, Brain tools."
                                header={
                                    <div className="flex h-full min-h-[6rem] w-full flex-1 items-center justify-center rounded-xl overflow-hidden bg-gradient-to-br from-primary/20 to-primary/5">
                                        <img
                                            src="https://images.unsplash.com/photo-1506126613408-eca07ce68773?q=80&w=800&h=400&fit=crop"
                                            alt="Centered presence"
                                            className="w-full h-full object-cover opacity-60"
                                        />
                                    </div>
                                }
                            />
                        </motion.div>
                        <motion.div
                            initial={{ opacity: 0, y: 20 }}
                            whileInView={{ opacity: 1, y: 0 }}
                            transition={{ duration: 0.6, delay: 0.2 }}
                            viewport={{ once: true, amount: 0.2 }}
                        >
                            <BentoGridItem
                                title="ART & ART² Protocols"
                                description="Clears emotional static and reclaims your power. Transform fear, anger, and doubt into intentional action."
                                header={
                                    <div className="flex h-full min-h-[6rem] w-full flex-1 items-center justify-center rounded-xl overflow-hidden bg-gradient-to-br from-primary/20 to-primary/5">
                                        <img
                                            src="https://images.unsplash.com/photo-1499209974431-9dddcece7f88?q=80&w=800&h=400&fit=crop"
                                            alt="Energy and transformation"
                                            className="w-full h-full object-cover opacity-60"
                                        />
                                    </div>
                                }
                            />
                        </motion.div>
                        <motion.div
                            initial={{ opacity: 0, y: 20 }}
                            whileInView={{ opacity: 1, y: 0 }}
                            transition={{ duration: 0.6, delay: 0.3 }}
                            viewport={{ once: true, amount: 0.2 }}
                        >
                            <BentoGridItem
                                title="The Diamond Sprint"
                                description="30-Day Practice that installs new habits and baseline identity. Build unshakable confidence through consistent action."
                                header={
                                    <div className="flex h-full min-h-[6rem] w-full flex-1 items-center justify-center rounded-xl overflow-hidden bg-gradient-to-br from-primary/20 to-primary/5">
                                        <img
                                            src="https://images.unsplash.com/photo-1518531933037-91b2f5f229cc?q=80&w=800&h=400&fit=crop"
                                            alt="Journey and elevation"
                                            className="w-full h-full object-cover opacity-60"
                                        />
                                    </div>
                                }
                                className="md:col-span-2"
                            />
                        </motion.div>
                    </BentoGrid>

                    <motion.div
                        initial={{ opacity: 0, y: 30 }}
                        whileInView={{ opacity: 1, y: 0 }}
                        transition={{ duration: 0.8 }}
                        viewport={{ once: true }}
                        className="text-center mb-12"
                    >
                        <p className="text-xl md:text-2xl font-light text-gray-300 mb-8">
                            This isn't theory. This is <span className="text-primary font-normal">embodied transformation</span>.
                        </p>
                        <blockquote className="text-lg italic text-gray-400 max-w-3xl mx-auto border-l-2 border-primary pl-6 text-left">
                            "Diamonds don't resist pressure; they're formed by it. They emerge clearer, stronger,
                            and more valuable than before. This is about building that response—not in theory,
                            but in the wiring of your nervous system."
                        </blockquote>
                    </motion.div>
                </div>
            </section>

            {/* Social Proof - Testimonials */}
            <TestimonialsSection
                title="What People Are Saying"
                subtitle="Real transformations from real people"
                testimonials={[
                    {
                        quote: "This isn’t about products. It’s about presence. The clarity, the energy, the tools—they stay with you long after the class ends.",
                        name: "James M.",
                        designation: "Entrepreneur",
                        src: "https://images.unsplash.com/photo-1494790108377-be9c29b29330?q=80&w=600&h=600&fit=crop"
                    },
                    {
                        quote: "This wasn’t just motivation. It was a transformation from the inside out.",
                        name: "Misty U.",
                        designation: "Finance Professional",
                        src: "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?q=80&w=600&h=600&fit=crop"
                    },
                    {
                        quote: "Michael’s training gave me my confidence back—not just at work, but in life. This was bigger than sales. This was soul work.",
                        name: "Fernando Garcia",
                        designation: "Entrepreneur",
                        src: "https://images.unsplash.com/photo-1500648767791-00dcc994a43e?q=80&w=600&h=600&fit=crop"
                    },
                    {
                        quote: "Michael is a product of a lifetime in the forge. The essence of Becoming Diamond is part of my daily practice.",
                        name: "Richard Hallett",
                        designation: "Psychologist & AI Engineer",
                        src: "/profile-placeholder.webp"
                    }
                ]}
            />

            {/* Lead Magnet - Free Diamond Sprint */}
            <LeadMagnetSection
                badge="FREE DOWNLOAD"
                title={
                    <>
                        Turning <span className="text-primary">Pressure</span> Into Power
                    </>
                }
                subtitle="Get the Free Diamond Sprint + Manifesto"
                benefits={[
                    { text: "The Diamond Manifesto – Daily identity upgrade ritual" },
                    { text: "The 30-Day Diamond Sprint – Nervous system training tracker" },
                    { text: "Swiss Army Knife Reset Guide – Emotional regulation cheat sheet" }
                ]}
                bonusItem="BONUS Audio: &quot;The Boss: Who's Really Running Your Life?&quot;"
                ctaText="Yes, I Want the Free Diamond Sprint"
                disclaimer="Discover the 3 tools that helped thousands regulate stress, rewire identity, and lead through chaos—in just 15 minutes a day."
            />

            {/* Book Sales Section (Visible but Secondary) */}
            <BookSalesSection />

            {/* Programs Overview */}
            <section id="programs" className="py-24 px-6 bg-gradient-to-b from-black via-primary/5 to-black">
                <div className="max-w-7xl mx-auto">
                    <SectionHeader
                        title={
                            <>
                                Choose Your <span className="text-primary">Transformation Path</span>
                            </>
                        }
                        subtitle="From self-paced courses to yearlong coaching—find the right fit for your journey"
                    />

                    <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 max-w-6xl mx-auto">
                        {/* Diamond Activation Experience Card */}
                        <motion.div
                            initial={{ opacity: 0, y: 30 }}
                            whileInView={{ opacity: 1, y: 0 }}
                            transition={{ duration: 0.6, delay: 0 }}
                            viewport={{ once: true }}
                        >
                            <CardSpotlight
                                className="h-full w-full"
                                color="rgba(79, 195, 247, 0.15)"
                            >
                                <div className="relative z-20 h-full flex flex-col">
                                    <div className="mb-6">
                                        <h3 className="text-2xl md:text-3xl font-bold text-white mb-3">
                                            Diamond Activation Experience
                                        </h3>
                                        <p className="text-lg text-primary font-light mb-4">
                                            A three-tier transformational path to reset your nervous system, rewire your identity, and lead with presence under pressure.
                                        </p>
                                        <p className="text-sm text-gray-400 leading-relaxed">
                                            Complete online transformation program with three tiers: self-paced ($97), full program with coaching ($497), and premium 1-on-1 mentoring $2997.
                                        </p>
                                    </div>

                                    <div className="mb-8 flex-grow">
                                        <h4 className="text-sm font-bold text-primary uppercase tracking-wide mb-4">
                                            What&apos;s Included
                                        </h4>
                                        <ul className="space-y-3">
                                            <li className="flex items-start">
                                                <IconCheck className="w-5 h-5 text-primary mt-0.5 mr-3 flex-shrink-0" />
                                                <span className="text-gray-300">Full Diamond Operating System Course</span>
                                            </li>
                                            <li className="flex items-start">
                                                <IconCheck className="w-5 h-5 text-primary mt-0.5 mr-3 flex-shrink-0" />
                                                <span className="text-gray-300">Swiss Army Knife Toolkit</span>
                                            </li>
                                            <li className="flex items-start">
                                                <IconCheck className="w-5 h-5 text-primary mt-0.5 mr-3 flex-shrink-0" />
                                                <span className="text-gray-300">Live Coaching & Community (Full/Premium tiers)</span>
                                            </li>
                                        </ul>
                                    </div>

                                    <div className="mt-auto">
                                        <Link
                                            href="/program"
                                            className="block w-full text-center bg-black/50 backdrop-blur-sm hover:bg-black/70 transition-colors border border-white/20 rounded-lg px-6 py-3"
                                        >
                                            View Program Details
                                        </Link>
                                    </div>
                                </div>
                            </CardSpotlight>
                        </motion.div>

                        {/* DiamondMind Collective Card */}
                        <motion.div
                            initial={{ opacity: 0, y: 30 }}
                            whileInView={{ opacity: 1, y: 0 }}
                            transition={{ duration: 0.6, delay: 0.2 }}
                            viewport={{ once: true }}
                        >
                            <CardSpotlight
                                className="h-full w-full border-primary/40"
                                color="rgba(79, 195, 247, 0.2)"
                            >
                                <div className="relative z-20 h-full flex flex-col">
                                    {/* Premium Badge */}
                                    <div className="absolute -top-4 -right-4 bg-gradient-to-br from-primary to-primary/70 text-black px-4 py-2 rounded-lg text-xs font-bold shadow-lg shadow-primary/50 uppercase tracking-wider">
                                        Premium
                                    </div>

                                    <div className="mb-6">
                                        <h3 className="text-2xl md:text-3xl font-bold text-white mb-3">
                                            DiamondMind Collective
                                        </h3>
                                        <p className="text-base text-gray-300 leading-relaxed">
                                            A yearlong transformational journey through five high-intensity Pressure Rooms—for those ready to stop reacting and start leading from within. Enrollment is capped at 100 per immersive experience.
                                        </p>
                                    </div>

                                    <div className="mb-8 flex-grow">
                                        <h4 className="text-sm font-bold text-primary uppercase tracking-wide mb-4">
                                            What&apos;s Included
                                        </h4>
                                        <ul className="space-y-3">
                                            <li className="flex items-start">
                                                <IconCheck className="w-5 h-5 text-primary mt-0.5 mr-3 flex-shrink-0" />
                                                <span className="text-gray-300">12-month guided journey</span>
                                            </li>
                                            <li className="flex items-start">
                                                <IconCheck className="w-5 h-5 text-primary mt-0.5 mr-3 flex-shrink-0" />
                                                <span className="text-gray-300">5 transformational Pressure Rooms</span>
                                            </li>
                                            <li className="flex items-start">
                                                <IconCheck className="w-5 h-5 text-primary mt-0.5 mr-3 flex-shrink-0" />
                                                <span className="text-gray-300">DiamondMindAI support</span>
                                            </li>
                                        </ul>
                                    </div>

                                    <div className="mt-auto">
                                        <Link
                                            href="/collective"
                                            className="block w-full text-center bg-primary/10 backdrop-blur-sm hover:bg-primary/20 transition-colors border border-primary/50 rounded-lg px-6 py-3"
                                        >
                                            Explore the Collective
                                        </Link>
                                    </div>
                                </div>
                            </CardSpotlight>
                        </motion.div>
                    </div>

                    {/* Bottom Message */}
                    <motion.div
                        initial={{ opacity: 0, y: 20 }}
                        whileInView={{ opacity: 1, y: 0 }}
                        transition={{ duration: 0.6, delay: 0.3 }}
                        viewport={{ once: true }}
                        className="text-center mt-12"
                    >
                        <p className="text-gray-400 text-sm md:text-base italic">
                            Not sure which path is right for you?{" "}
                            <button
                                onClick={() => document.getElementById('lead-magnet')?.scrollIntoView({ behavior: 'smooth' })}
                                className="text-primary hover:underline focus:outline-none"
                            >
                                Start with the free Diamond Sprint
                            </button>
                            {" "}to experience the foundation.
                        </p>
                    </motion.div>
                </div>
            </section>

            <Footer />
        </main>
    );
}
</file>

<file path="providers.tsx">
/**
 * Client-Side Providers Wrapper
 *
 * Wraps the application with necessary providers including SessionProvider.
 * Must be a client component to use React Context.
 */

"use client";

import { SessionProvider } from "next-auth/react";
import { UserProvider } from "@/contexts/UserContext";
import { CourseProvider } from "@/contexts/CourseContext";

export function Providers({ children }: { children: React.ReactNode }) {
  return (
    <SessionProvider>
      <UserProvider>
        <CourseProvider>
          {children}
        </CourseProvider>
      </UserProvider>
    </SessionProvider>
  );
}
</file>

</files>
